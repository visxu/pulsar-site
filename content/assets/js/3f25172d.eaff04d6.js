"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[81181],{15680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>g});var r=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,g=u["".concat(s,".").concat(m)]||u[m]||y[m]||i;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},19365:(e,t,n)=>{n.d(t,{A:()=>o});var r=n(96540),a=n(20053);const i={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:n,className:o}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.A)(i.tabItem,o),hidden:n},t)}},11470:(e,t,n)=>{n.d(t,{A:()=>k});var r=n(58168),a=n(96540),i=n(20053),o=n(23104),l=n(56347),s=n(57485),c=n(31682),p=n(89466);function u(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function y(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??u(n);return function(e){const t=(0,c.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const r=(0,l.W6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s.aZ)(i),(0,a.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(r.location.search);t.set(i,e),r.replace({...r.location,search:t.toString()})}),[i,r])]}function d(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,i=y(e),[o,l]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:i}))),[s,c]=g({queryString:n,groupId:r}),[u,d]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,i]=(0,p.Dv)(n);return[r,(0,a.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:r}),h=(()=>{const e=s??u;return m({value:e,tabValues:i})?e:null})();(0,a.useLayoutEffect)((()=>{h&&l(h)}),[h]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),c(e),d(e)}),[c,d,i]),tabValues:i}}var h=n(92303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:t,block:n,selectedValue:l,selectValue:s,tabValues:c}=e;const p=[],{blockElementScrollPositionUntilNextRender:u}=(0,o.a_)(),y=e=>{const t=e.currentTarget,n=p.indexOf(t),r=c[n].value;r!==l&&(u(t),s(r))},m=e=>{let t=null;switch(e.key){case"Enter":y(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:o}=e;return a.createElement("li",(0,r.A)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>p.push(e),onKeyDown:m,onClick:y},o,{className:(0,i.A)("tabs__item",f.tabItem,o?.className,{"tabs__item--active":l===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:r}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function N(e){const t=d(e);return a.createElement("div",{className:(0,i.A)("tabs-container",f.tabList)},a.createElement(b,(0,r.A)({},e,t)),a.createElement(v,(0,r.A)({},e,t)))}function k(e){const t=(0,h.A)();return a.createElement(N,(0,r.A)({key:String(t)},e))}},36838:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>g,frontMatter:()=>l,metadata:()=>c,toc:()=>u});var r=n(58168),a=(n(96540),n(15680)),i=n(11470),o=n(19365);const l={id:"security-tls-transport",title:"TLS Encryption",sidebar_label:"TLS Encryption",description:"Get a comprehensive understanding of TLS concepts, debugging methods and mTLS configuration methods in Pulsar."},s=void 0,c={unversionedId:"security-tls-transport",id:"version-4.0.x/security-tls-transport",title:"TLS Encryption",description:"Get a comprehensive understanding of TLS concepts, debugging methods and mTLS configuration methods in Pulsar.",source:"@site/versioned_docs/version-4.0.x/security-tls-transport.md",sourceDirName:".",slug:"/security-tls-transport",permalink:"/docs/4.0.x/security-tls-transport",draft:!1,editUrl:"https://github.com/apache/pulsar-site/edit/main/versioned_docs/version-4.0.x/security-tls-transport.md",tags:[],version:"4.0.x",frontMatter:{id:"security-tls-transport",title:"TLS Encryption",sidebar_label:"TLS Encryption",description:"Get a comprehensive understanding of TLS concepts, debugging methods and mTLS configuration methods in Pulsar."},sidebar:"docsSidebar",previous:{title:"End-to-End Encryption",permalink:"/docs/4.0.x/security-encryption"},next:{title:"Bouncy Castle Providers",permalink:"/docs/4.0.x/security-bouncy-castle"}},p={},u=[{value:"TLS overview",id:"tls-overview",level:2},{value:"TLS certificates",id:"tls-certificates",level:3},{value:"Certificate formats",id:"certificate-formats",level:3},{value:"Hostname verification",id:"hostname-verification",level:3},{value:"Configure mTLS encryption with PEM",id:"configure-mtls-encryption-with-pem",level:2},{value:"Step 1: Create TLS certificates",id:"step-1-create-tls-certificates",level:3},{value:"Create a certificate authority",id:"create-a-certificate-authority",level:4},{value:"Create a server certificate",id:"create-a-server-certificate",level:4},{value:"Create a broker client certificate",id:"create-a-broker-client-certificate",level:4},{value:"Create a admin certificate",id:"create-a-admin-certificate",level:4},{value:"Create a client certificate",id:"create-a-client-certificate",level:4},{value:"Create a proxy certificate (Optional)",id:"create-a-proxy-certificate-optional",level:4},{value:"Step 2: Configure brokers",id:"step-2-configure-brokers",level:3},{value:"Configure TLS Protocol Version and Cipher",id:"configure-tls-protocol-version-and-cipher",level:4},{value:"Step 3: Configure proxies",id:"step-3-configure-proxies",level:3},{value:"Step 4: Configure clients",id:"step-4-configure-clients",level:3},{value:"Step 5: Configure CLI tools",id:"step-5-configure-cli-tools",level:3},{value:"Configure mTLS encryption with KeyStore",id:"configure-mtls-encryption-with-keystore",level:2},{value:"Step 1: Generate JKS certificate",id:"step-1-generate-jks-certificate",level:3},{value:"Step 2: Configure brokers",id:"step-2-configure-brokers-1",level:3},{value:"Step 3: Configure proxies",id:"step-3-configure-proxies-1",level:3},{value:"Step 4: Configure clients",id:"step-4-configure-clients-1",level:3},{value:"Step 5: Configure CLI tools",id:"step-5-configure-cli-tools-1",level:3},{value:"Enable TLS Logging",id:"enable-tls-logging",level:2}],y={toc:u},m="wrapper";function g(e){let{components:t,...n}=e;return(0,a.yg)(m,(0,r.A)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"tls-overview"},"TLS overview"),(0,a.yg)("p",null,"Transport Layer Security (TLS) is a form of ",(0,a.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Public-key_cryptography"},"public key cryptography"),". By default, Pulsar clients communicate with Pulsar services in plain text. This means that all data is sent in the clear. You can use TLS to encrypt this traffic to protect the traffic from the snooping of a man-in-the-middle attacker."),(0,a.yg)("p",null,"This section introduces how to configure TLS encryption in Pulsar. For how to configure mTLS authentication in Pulsar, refer to ",(0,a.yg)("a",{parentName:"p",href:"/docs/4.0.x/security-tls-authentication"},"mTLS authentication"),". Alternatively, you can use another ",(0,a.yg)("a",{parentName:"p",href:"/docs/4.0.x/security-athenz"},"Athenz authentication")," on top of TLS transport encryption."),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("p",{parentName:"admonition"},"Enabling TLS encryption may impact the performance due to encryption overhead.")),(0,a.yg)("h3",{id:"tls-certificates"},"TLS certificates"),(0,a.yg)("p",null,"TLS certificates include the following three types. Each certificate (key pair) contains both a public key that encrypts messages and a private key that decrypts messages."),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Certificate Authority (CA)",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"CA private key is distributed to all parties involved."),(0,a.yg)("li",{parentName:"ul"},"CA public key (",(0,a.yg)("strong",{parentName:"li"},"trust cert"),") is used for signing a certificate for either broker or clients."))),(0,a.yg)("li",{parentName:"ul"},"Server key pairs"),(0,a.yg)("li",{parentName:"ul"},"Client key pairs (for mutual TLS)")),(0,a.yg)("p",null,"For both server and client certificates, the private key with a certificate request is generated first, and the public key (the certificate) is generated after the ",(0,a.yg)("strong",{parentName:"p"},"trust cert")," signs the certificate request. When ",(0,a.yg)("a",{parentName:"p",href:"/docs/4.0.x/security-tls-authentication"},"mTLS authentication")," is enabled, the server uses the ",(0,a.yg)("strong",{parentName:"p"},"trust cert")," to verify that the client has a key pair that the certificate authority signs. The Common Name (CN) of a client certificate is used as the client's role token, while the Subject Alternative Name (SAN) of a server certificate is used for ",(0,a.yg)("a",{parentName:"p",href:"#hostname-verification"},"Hostname verification"),"."),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("p",{parentName:"admonition"},"The validity of these certificates is 365 days. It's highly recommended to use ",(0,a.yg)("inlineCode",{parentName:"p"},"sha256")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"sha512")," as the signature algorithm, while ",(0,a.yg)("inlineCode",{parentName:"p"},"sha1")," is not supported.")),(0,a.yg)("h3",{id:"certificate-formats"},"Certificate formats"),(0,a.yg)("p",null,"You can use either one of the following certificate formats to configure TLS encryption:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Recommended: Privacy Enhanced Mail (PEM).\nSee ",(0,a.yg)("a",{parentName:"li",href:"#configure-tls-encryption-with-pem"},"Configure TLS encryption with PEM")," for detailed instructions."),(0,a.yg)("li",{parentName:"ul"},"Optional: Java ",(0,a.yg)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Java_KeyStore"},"KeyStore")," (JKS).\nSee ",(0,a.yg)("a",{parentName:"li",href:"#configure-tls-encryption-with-keystore"},"Configure TLS encryption with KeyStore")," for detailed instructions.")),(0,a.yg)("h3",{id:"hostname-verification"},"Hostname verification"),(0,a.yg)("p",null,"Hostname verification is a TLS security feature whereby a client can refuse to connect to a server if the Subject Alternative Name (SAN) does not match the hostname that the hostname is connecting to."),(0,a.yg)("p",null,"By default, Pulsar clients disable hostname verification, as it requires that each broker has a DNS record and a unique cert."),(0,a.yg)("p",null,"One scenario where you may want to enable hostname verification is where you have multiple proxy nodes behind a VIP, and the VIP has a DNS record, for example, ",(0,a.yg)("inlineCode",{parentName:"p"},"pulsar.mycompany.com"),". In this case, you can generate a TLS cert with ",(0,a.yg)("inlineCode",{parentName:"p"},"pulsar.mycompany.com")," as the SAN, and then enable hostname verification on the client."),(0,a.yg)("p",null,"To enable hostname verification in Pulsar, ensure that SAN exactly matches the fully qualified domain name (FQDN) of the server. The client compares the SAN with the DNS domain name to ensure that it is connecting to the desired server. See ",(0,a.yg)("a",{parentName:"p",href:"#configure-clients"},"Configure clients")," for more details."),(0,a.yg)("p",null,"Moreover, as the administrator has full control of the CA, a bad actor is unlikely to be able to pull off a man-in-the-middle attack. ",(0,a.yg)("inlineCode",{parentName:"p"},"allowInsecureConnection")," allows the client to connect to servers whose cert has not been signed by an approved CA. The client disables ",(0,a.yg)("inlineCode",{parentName:"p"},"allowInsecureConnection")," by default, and you should always disable ",(0,a.yg)("inlineCode",{parentName:"p"},"allowInsecureConnection")," in production environments. As long as you disable ",(0,a.yg)("inlineCode",{parentName:"p"},"allowInsecureConnection"),", a man-in-the-middle attack requires that the attacker has access to the CA."),(0,a.yg)("h2",{id:"configure-mtls-encryption-with-pem"},"Configure mTLS encryption with PEM"),(0,a.yg)("p",null,"By default, Pulsar uses ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/netty/netty-tcnative"},"netty-tcnative"),". It includes two implementations, ",(0,a.yg)("inlineCode",{parentName:"p"},"OpenSSL")," (default) and ",(0,a.yg)("inlineCode",{parentName:"p"},"JDK"),". When ",(0,a.yg)("inlineCode",{parentName:"p"},"OpenSSL")," is unavailable, ",(0,a.yg)("inlineCode",{parentName:"p"},"JDK")," is used."),(0,a.yg)("p",null,"To configure mTLS encryption with PEM, complete the following steps."),(0,a.yg)("h3",{id:"step-1-create-tls-certificates"},"Step 1: Create TLS certificates"),(0,a.yg)("p",null,"Creating TLS certificates involves creating a ",(0,a.yg)("a",{parentName:"p",href:"#create-a-certificate-authority"},"certificate authority"),", a ",(0,a.yg)("a",{parentName:"p",href:"#create-a-server-certificate"},"server certificate"),", and a ",(0,a.yg)("a",{parentName:"p",href:"#create-a-client-certificate"},"client certificate"),"."),(0,a.yg)("h4",{id:"create-a-certificate-authority"},"Create a certificate authority"),(0,a.yg)("p",null,"You can use a certificate authority (CA) to sign both server and client certificates. This ensures that each party trusts the others. Store CA in a very secure location (ideally completely disconnected from networks, air-gapped, and fully encrypted)."),(0,a.yg)("p",null,"Use the following command to create a CA."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},'openssl genrsa -out ca.key.pem 2048\nopenssl req -x509 -new -nodes -key ca.key.pem -subj "/CN=CARoot" -days 365 -out ca.cert.pem\n')),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("p",{parentName:"admonition"},"The default ",(0,a.yg)("inlineCode",{parentName:"p"},"openssl")," on macOS doesn't work for the commands above. You need to upgrade ",(0,a.yg)("inlineCode",{parentName:"p"},"openssl")," via Homebrew:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-bash"},'brew install openssl\nexport PATH="/usr/local/Cellar/openssl@3/3.0.1/bin:$PATH"\n')),(0,a.yg)("p",{parentName:"admonition"},"Use the actual path from the output of the ",(0,a.yg)("inlineCode",{parentName:"p"},"brew install")," command. Note that version number ",(0,a.yg)("inlineCode",{parentName:"p"},"3.0.1")," might change.")),(0,a.yg)("h4",{id:"create-a-server-certificate"},"Create a server certificate"),(0,a.yg)("p",null,"Once you have created a CA, you can create certificate requests and sign them with the CA."),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Generate the server's private key."),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"openssl genrsa -out server.key.pem 2048\n")),(0,a.yg)("p",{parentName:"li"},"The server expects the key to be in ",(0,a.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/PKCS_8"},"PKCS 8")," format. Enter the following command to convert it."),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"openssl pkcs8 -topk8 -inform PEM -outform PEM -in server.key.pem -out server.key-pk8.pem -nocrypt\n"))),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Create a ",(0,a.yg)("inlineCode",{parentName:"p"},"server.conf")," file with the following content:"),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-properties"},"[ req ]\ndefault_bits = 2048\nprompt = no\ndefault_md = sha256\ndistinguished_name = dn\n\n[ v3_ext ]\nauthorityKeyIdentifier=keyid,issuer:always\nbasicConstraints=CA:FALSE\nkeyUsage=critical, digitalSignature, keyEncipherment\nextendedKeyUsage=serverAuth\nsubjectAltName=@alt_names\n\n[ dn ]\nCN = server\n\n[ alt_names ]\nDNS.1 = pulsar\nDNS.2 = pulsar.default\nIP.1 = 127.0.0.1\nIP.2 = 192.168.1.2\n")),(0,a.yg)("admonition",{parentName:"li",type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"To configure ",(0,a.yg)("a",{parentName:"p",href:"#hostname-verification"},"hostname verification"),", you need to enter the hostname of the server in ",(0,a.yg)("inlineCode",{parentName:"p"},"alt_names")," as the Subject Alternative Name (SAN). To ensure that multiple machines can reuse the same certificate, you can also use a wildcard to match a group of server hostnames, for example, ",(0,a.yg)("inlineCode",{parentName:"p"},"*.server.usw.example.com"),"."))),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Generate the certificate request."),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"openssl req -new -config server.conf -key server.key.pem -out server.csr.pem -sha256\n"))),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Sign the certificate with the CA."),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"openssl x509 -req -in server.csr.pem -CA ca.cert.pem -CAkey ca.key.pem -CAcreateserial -out server.cert.pem -days 365 -extensions v3_ext -extfile server.conf -sha256\n")))),(0,a.yg)("p",null,"At this point, you have a cert, ",(0,a.yg)("inlineCode",{parentName:"p"},"server.cert.pem"),", and a key, ",(0,a.yg)("inlineCode",{parentName:"p"},"server.key-pk8.pem"),", which you can use along with ",(0,a.yg)("inlineCode",{parentName:"p"},"ca.cert.pem")," to configure TLS encryption for your brokers and proxies."),(0,a.yg)("h4",{id:"create-a-broker-client-certificate"},"Create a broker client certificate"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Generate the broker_client's private key."),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"openssl genrsa -out broker_client.key.pem 2048\n")),(0,a.yg)("p",{parentName:"li"},"The broker_client expects the key to be in ",(0,a.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/PKCS_8"},"PKCS 8")," format. Enter the following command to convert it."),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"openssl pkcs8 -topk8 -inform PEM -outform PEM -in broker_client.key.pem -out broker_client.key-pk8.pem -nocrypt\n"))),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Generate the certificate request. Note that the value of ",(0,a.yg)("inlineCode",{parentName:"p"},"CN")," is used as the broker client's role token."),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-bash"},'openssl req -new -subj "/CN=broker_client" -key broker_client.key.pem -out broker_client.csr.pem -sha256\n'))),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Sign the certificate with the CA."),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"openssl x509 -req -in broker_client.csr.pem -CA ca.cert.pem -CAkey ca.key.pem -CAcreateserial -out broker_client.cert.pem -days 365 -sha256\n")))),(0,a.yg)("p",null,"At this point, you have a cert ",(0,a.yg)("inlineCode",{parentName:"p"},"broker_client.cert.pem")," and a key ",(0,a.yg)("inlineCode",{parentName:"p"},"broker_client.key-pk8.pem"),", which you can use along with ",(0,a.yg)("inlineCode",{parentName:"p"},"ca.cert.pem")," to configure TLS encryption for your broker client."),(0,a.yg)("h4",{id:"create-a-admin-certificate"},"Create a admin certificate"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Generate the admin's private key."),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"openssl genrsa -out admin.key.pem 2048\n")),(0,a.yg)("p",{parentName:"li"},"The admin expects the key to be in ",(0,a.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/PKCS_8"},"PKCS 8")," format. Enter the following command to convert it."),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"openssl pkcs8 -topk8 -inform PEM -outform PEM -in admin.key.pem -out admin.key-pk8.pem -nocrypt\n"))),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Generate the certificate request. Note that the value of ",(0,a.yg)("inlineCode",{parentName:"p"},"CN")," is used as the admin's role token."),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-bash"},'openssl req -new -subj "/CN=admin" -key admin.key.pem -out admin.csr.pem -sha256\n'))),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Sign the certificate with the CA."),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"openssl x509 -req -in admin.csr.pem -CA ca.cert.pem -CAkey ca.key.pem -CAcreateserial -out admin.cert.pem -days 365 -sha256\n")))),(0,a.yg)("p",null,"At this point, you have a cert ",(0,a.yg)("inlineCode",{parentName:"p"},"admin.cert.pem")," and a key ",(0,a.yg)("inlineCode",{parentName:"p"},"admin.key-pk8.pem"),", which you can use along with ",(0,a.yg)("inlineCode",{parentName:"p"},"ca.cert.pem")," to configure TLS encryption for your pulsar admin."),(0,a.yg)("h4",{id:"create-a-client-certificate"},"Create a client certificate"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Generate the client's private key."),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"openssl genrsa -out client.key.pem 2048\n")),(0,a.yg)("p",{parentName:"li"},"The client expects the key to be in ",(0,a.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/PKCS_8"},"PKCS 8")," format. Enter the following command to convert it."),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"openssl pkcs8 -topk8 -inform PEM -outform PEM -in client.key.pem -out client.key-pk8.pem -nocrypt\n"))),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Generate the certificate request. Note that the value of ",(0,a.yg)("inlineCode",{parentName:"p"},"CN")," is used as the client's role token."),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-bash"},'openssl req -new -subj "/CN=client" -key client.key.pem -out client.csr.pem -sha256\n'))),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Sign the certificate with the CA."),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"openssl x509 -req -in client.csr.pem -CA ca.cert.pem -CAkey ca.key.pem -CAcreateserial -out client.cert.pem -days 365 -sha256\n")))),(0,a.yg)("p",null,"At this point, you have a cert ",(0,a.yg)("inlineCode",{parentName:"p"},"client.cert.pem")," and a key ",(0,a.yg)("inlineCode",{parentName:"p"},"client.key-pk8.pem"),", which you can use along with ",(0,a.yg)("inlineCode",{parentName:"p"},"ca.cert.pem")," to configure TLS encryption for your client."),(0,a.yg)("h4",{id:"create-a-proxy-certificate-optional"},"Create a proxy certificate (Optional)"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Generate the proxy's private key."),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"openssl genrsa -out proxy.key.pem 2048\n")),(0,a.yg)("p",{parentName:"li"},"The proxy expects the key to be in ",(0,a.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/PKCS_8"},"PKCS 8")," format. Enter the following command to convert it."),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"openssl pkcs8 -topk8 -inform PEM -outform PEM -in proxy.key.pem -out proxy.key-pk8.pem -nocrypt\n"))),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Generate the certificate request. Note that the value of ",(0,a.yg)("inlineCode",{parentName:"p"},"CN")," is used as the proxy's role token."),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-bash"},'openssl req -new -subj "/CN=proxy" -key proxy.key.pem -out proxy.csr.pem -sha256\n'))),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Sign the certificate with the CA."),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"openssl x509 -req -in proxy.csr.pem -CA ca.cert.pem -CAkey ca.key.pem -CAcreateserial -out proxy.cert.pem -days 365 -sha256\n")))),(0,a.yg)("p",null,"At this point, you have a cert ",(0,a.yg)("inlineCode",{parentName:"p"},"proxy.cert.pem")," and a key ",(0,a.yg)("inlineCode",{parentName:"p"},"proxy.key-pk8.pem"),", which you can use along with ",(0,a.yg)("inlineCode",{parentName:"p"},"ca.cert.pem")," to configure TLS encryption for your proxy."),(0,a.yg)("h3",{id:"step-2-configure-brokers"},"Step 2: Configure brokers"),(0,a.yg)("p",null,"To configure a Pulsar ",(0,a.yg)("a",{parentName:"p",href:"/docs/4.0.x/reference-terminology#broker"},"broker")," to use TLS encryption, you need to add these values to ",(0,a.yg)("inlineCode",{parentName:"p"},"broker.conf")," in the ",(0,a.yg)("inlineCode",{parentName:"p"},"conf")," directory of your Pulsar installation. Substitute the appropriate certificate paths where necessary."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-properties"},"# configure TLS ports\nbrokerServicePortTls=6651\nwebServicePortTls=8081\n\n# configure CA certificate\ntlsTrustCertsFilePath=/path/to/ca.cert.pem\n# configure server certificate\ntlsCertificateFilePath=/path/to/server.cert.pem\n# configure server's priviate key\ntlsKeyFilePath=/path/to/server.key-pk8.pem\n\n# enable mTLS\ntlsRequireTrustedClientCertOnConnect=true\n\n# configure mTLS for the internal client\nbrokerClientTlsEnabled=true\nbrokerClientTrustCertsFilePath=/path/to/ca.cert.pem\nbrokerClientCertificateFilePath=/path/to/broker_client.cert.pem\nbrokerClientKeyFilePath=/path/to/broker_client.key-pk8.pem\n")),(0,a.yg)("h4",{id:"configure-tls-protocol-version-and-cipher"},"Configure TLS Protocol Version and Cipher"),(0,a.yg)("p",null,"To configure the broker (and proxy) to require specific TLS protocol versions and ciphers for TLS negotiation, you can use the TLS protocol versions and ciphers to stop clients from requesting downgraded TLS protocol versions or ciphers that may have weaknesses."),(0,a.yg)("p",null,"By default, Pulsar uses OpenSSL when it is available, otherwise, Pulsar defaults back to the JDK implementation. OpenSSL currently supports ",(0,a.yg)("inlineCode",{parentName:"p"},"TLSv1.1"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"TLSv1.2")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"TLSv1.3"),". You can acquire a list of supported ciphers from the OpenSSL ciphers command, i.e. ",(0,a.yg)("inlineCode",{parentName:"p"},"openssl ciphers -tls1_3"),"."),(0,a.yg)("p",null,"Both the TLS protocol versions and cipher properties can take multiple values, separated by commas. The possible values for protocol versions and ciphers depend on the TLS provider that you are using."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-properties"},"tlsProtocols=TLSv1.3,TLSv1.2\ntlsCiphers=TLS_DH_RSA_WITH_AES_256_GCM_SHA384,TLS_DH_RSA_WITH_AES_256_CBC_SHA\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"tlsProtocols=TLSv1.3,TLSv1.2"),": List out the TLS protocols that you are going to accept from clients. By default, it is not set."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"tlsCiphers=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"),": A cipher suite is a named combination of authentication, encryption, MAC and key exchange algorithm used to negotiate the security settings for a network connection using TLS network protocol. By default, it is null. See ",(0,a.yg)("a",{parentName:"li",href:"https://www.openssl.org/docs/man1.0.2/apps/ciphers.html"},"OpenSSL Ciphers")," and ",(0,a.yg)("a",{parentName:"li",href:"http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#ciphersuites"},"JDK Ciphers")," for more details.")),(0,a.yg)("p",null,"For JDK 11, you can obtain a list of supported values from the documentation:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"https://docs.oracle.com/en/java/javase/11/security/oracle-providers.html#GUID-7093246A-31A3-4304-AC5F-5FB6400405E2__SUNJSSEPROVIDERPROTOCOLPARAMETERS-BBF75009"},"TLS protocol")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"https://docs.oracle.com/en/java/javase/11/security/oracle-providers.html#GUID-7093246A-31A3-4304-AC5F-5FB6400405E2__SUNJSSE_CIPHER_SUITES"},"Ciphers"))),(0,a.yg)("h3",{id:"step-3-configure-proxies"},"Step 3: Configure proxies"),(0,a.yg)("p",null,"Configuring mTLS on proxies includes two directions of connections, from clients to proxies, and from proxies to brokers."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-properties"},"# configure TLS ports\nservicePortTls=6651\nwebServicePortTls=8081\n\n# configure certificates for clients to connect proxy\ntlsCertificateFilePath=/path/to/server.cert.pem\ntlsKeyFilePath=/path/to/server.key-pk8.pem\ntlsTrustCertsFilePath=/path/to/ca.cert.pem\n\n# enable mTLS\ntlsRequireTrustedClientCertOnConnect=true\n\n# configure TLS for proxy to connect brokers\ntlsEnabledWithBroker=true\nbrokerClientTrustCertsFilePath=/path/to/ca.cert.pem\nbrokerClientCertificateFilePath=/path/to/proxy.cert.pem\nbrokerClientKeyFilePath=/path/to/proxy.key-pk8.pem\n")),(0,a.yg)("h3",{id:"step-4-configure-clients"},"Step 4: Configure clients"),(0,a.yg)("p",null,"To enable TLS encryption, you need to configure the clients to use ",(0,a.yg)("inlineCode",{parentName:"p"},"https://")," with port 8443 for the web service URL, and ",(0,a.yg)("inlineCode",{parentName:"p"},"pulsar+ssl://")," with port 6651 for the broker service URL."),(0,a.yg)("p",null,"As the server certificate that you generated above does not belong to any of the default trust chains, you also need to either specify the path of the ",(0,a.yg)("strong",{parentName:"p"},"trust cert")," (recommended) or enable the clients to allow untrusted server certs."),(0,a.yg)("p",null,"The following examples show how to configure TLS encryption for Java/Python/C++/Node.js/C#/WebSocket clients."),(0,a.yg)(i.A,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"Python",value:"Python"},{label:"C++",value:"C++"},{label:"Node.js",value:"Node.js"},{label:"C#",value:"C#"},{label:"WebSocket API",value:"WebSocket API"}],mdxType:"Tabs"},(0,a.yg)(o.A,{value:"Java",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-java"},'import org.apache.pulsar.client.api.PulsarClient;\n\nPulsarClient client = PulsarClient.builder()\n    .serviceUrl("pulsar+ssl://broker.example.com:6651/")\n    .tlsKeyFilePath("/path/to/client.key-pk8.pem")\n    .tlsCertificateFilePath("/path/to/client.cert.pem")\n    .tlsTrustCertsFilePath("/path/to/ca.cert.pem")\n    .enableTlsHostnameVerification(false) // false by default, in any case\n    .allowTlsInsecureConnection(false) // false by default, in any case\n    .build();\n'))),(0,a.yg)(o.A,{value:"Python",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'from pulsar import Client\n\nclient = Client("pulsar+ssl://broker.example.com:6651/",\n                tls_hostname_verification=False,\n                tls_trust_certs_file_path="/path/to/ca.cert.pem",\n                tls_allow_insecure_connection=False) // defaults to false from v2.2.0 onwards\n'))),(0,a.yg)(o.A,{value:"C++",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"#include <pulsar/Client.h>\n\nClientConfiguration config = ClientConfiguration();\nconfig.setUseTls(true);  // shouldn't be needed soon\nconfig.setTlsTrustCertsFilePath(caPath);\nconfig.setTlsAllowInsecureConnection(false);\nconfig.setAuth(pulsar::AuthTls::create(clientPublicKeyPath, clientPrivateKeyPath));\nconfig.setValidateHostName(false);\n"))),(0,a.yg)(o.A,{value:"Node.js",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},"const Pulsar = require('pulsar-client');\n\n(async () => {\n  const client = new Pulsar.Client({\n    serviceUrl: 'pulsar+ssl://broker.example.com:6651/',\n    tlsTrustCertsFilePath: '/path/to/ca.cert.pem',\n    useTls: true,\n    tlsValidateHostname: false,\n    tlsAllowInsecureConnection: false,\n  });\n})();\n"))),(0,a.yg)(o.A,{value:"C#",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-csharp"},"var certificate = new X509Certificate2(\"ca.cert.pem\");\nvar client = PulsarClient.Builder()\n                         .TrustedCertificateAuthority(certificate) //If the CA is not trusted on the host, you can add it explicitly.\n                         .VerifyCertificateAuthority(true) //Default is 'true'\n                         .VerifyCertificateName(false)     //Default is 'false'\n                         .Build();\n")),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("p",{parentName:"admonition"},(0,a.yg)("inlineCode",{parentName:"p"},"VerifyCertificateName")," refers to the configuration of hostname verification in the C# client."))),(0,a.yg)(o.A,{value:"WebSocket API",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'import websockets\nimport asyncio\nimport base64\nimport json\nimport ssl\nimport pathlib\n\nssl_context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)\nclient_cert_pem = pathlib.Path(__file__).with_name("client.cert.pem")\nclient_key_pem = pathlib.Path(__file__).with_name("client.key.pem")\nca_cert_pem = pathlib.Path(__file__).with_name("ca.cert.pem")\nssl_context.load_cert_chain(certfile=client_cert_pem, keyfile=client_key_pem)\nssl_context.load_verify_locations(ca_cert_pem)\n# websocket producer uri wss, not ws\nuri = "wss://localhost:8080/ws/v2/producer/persistent/public/default/testtopic"\nclient_pem = pathlib.Path(__file__).with_name("pulsar_client.pem")\nssl_context.load_verify_locations(client_pem)\n# websocket producer uri wss, not ws\nuri = "wss://localhost:8080/ws/v2/producer/persistent/public/default/testtopic"\n# encode message\ns = "Hello World"\nfirstEncoded = s.encode("UTF-8")\nbinaryEncoded = base64.b64encode(firstEncoded)\npayloadString = binaryEncoded.decode(\'UTF-8\')\nasync def producer_handler(websocket):\n    await websocket.send(json.dumps({\n            \'payload\' : payloadString,\n            \'properties\': {\n                \'key1\' : \'value1\',\n                \'key2\' : \'value2\'\n            },\n            \'context\' : 5\n        }))\nasync def test():\n    async with websockets.connect(uri) as websocket:\n        await producer_handler(websocket)\n        message = await websocket.recv()\n        print(f"< {message}")\nasyncio.run(test())\n')),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("p",{parentName:"admonition"},"In addition to the required configurations in the ",(0,a.yg)("inlineCode",{parentName:"p"},"conf/client.conf")," file, you need to configure more parameters in the ",(0,a.yg)("inlineCode",{parentName:"p"},"conf/broker.conf")," file to enable TLS encryption on WebSocket service. For more details, see ",(0,a.yg)("a",{parentName:"p",href:"client-libraries-websocket.md#security-settings"},"security settings for WebSocket"),".")))),(0,a.yg)("h3",{id:"step-5-configure-cli-tools"},"Step 5: Configure CLI tools"),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"/docs/4.0.x/reference-cli-tools"},"Command-line tools")," like ",(0,a.yg)("a",{parentName:"p",href:"pathname:///reference/#/4.0.x/pulsar-admin/"},(0,a.yg)("inlineCode",{parentName:"a"},"pulsar-admin")),", ",(0,a.yg)("a",{parentName:"p",href:"pathname:///reference/#/4.0.x/pulsar-perf/"},(0,a.yg)("inlineCode",{parentName:"a"},"pulsar-perf")),", and ",(0,a.yg)("a",{parentName:"p",href:"pathname:///reference/#/4.0.x/pulsar-client/"},(0,a.yg)("inlineCode",{parentName:"a"},"pulsar-client"))," use the ",(0,a.yg)("inlineCode",{parentName:"p"},"conf/client.conf")," config file in a Pulsar installation."),(0,a.yg)("p",null,"To use mTLS encryption with Pulsar CLI tools, you need to add the following parameters to the ",(0,a.yg)("inlineCode",{parentName:"p"},"conf/client.conf")," file."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-properties"},"webServiceUrl=https://localhost:8081/\nbrokerServiceUrl=pulsar+ssl://localhost:6651/\nauthPlugin=org.apache.pulsar.client.impl.auth.AuthenticationTls\nauthParams=tlsCertFile:/path/to/admin.cert.pem,tlsKeyFile:/path/to/admin.key-pk8.pem\n")),(0,a.yg)("h2",{id:"configure-mtls-encryption-with-keystore"},"Configure mTLS encryption with KeyStore"),(0,a.yg)("p",null,"By default, Pulsar uses ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/google/conscrypt"},"Conscrypt")," for both broker service and Web service."),(0,a.yg)("p",null,"To configure mTLS encryption with KeyStore, complete the following steps:"),(0,a.yg)("h3",{id:"step-1-generate-jks-certificate"},"Step 1: Generate JKS certificate"),(0,a.yg)("p",null,"You can use Java's ",(0,a.yg)("inlineCode",{parentName:"p"},"keytool")," utility to generate the key and certificate for each machine in the cluster."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"DAYS=365\nCLIENT_COMMON_PARAMS=\"-storetype JKS -storepass clientpw -keypass clientpw -noprompt\"\nBROKER_COMMON_PARAMS=\"-storetype JKS -storepass brokerpw -keypass brokerpw -noprompt\"\n\n# create keystore\nkeytool -genkeypair -keystore broker.keystore.jks ${BROKER_COMMON_PARAMS} -keyalg RSA -keysize 2048 -alias broker -validity $DAYS \\\n-dname 'CN=broker,OU=Unknown,O=Unknown,L=Unknown,ST=Unknown,C=Unknown'\nkeytool -genkeypair -keystore client.keystore.jks ${CLIENT_COMMON_PARAMS} -keyalg RSA -keysize 2048 -alias client -validity $DAYS \\\n-dname 'CN=client,OU=Unknown,O=Unknown,L=Unknown,ST=Unknown,C=Unknown'\n\n# export certificate\nkeytool -exportcert -keystore broker.keystore.jks ${BROKER_COMMON_PARAMS} -file broker.cer -alias broker\nkeytool -exportcert -keystore client.keystore.jks ${CLIENT_COMMON_PARAMS} -file client.cer -alias client\n\n# generate truststore\nkeytool -importcert -keystore client.truststore.jks ${CLIENT_COMMON_PARAMS} -file broker.cer -alias truststore\nkeytool -importcert -keystore broker.truststore.jks ${BROKER_COMMON_PARAMS} -file client.cer -alias truststore\n")),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("p",{parentName:"admonition"},"To configure ",(0,a.yg)("a",{parentName:"p",href:"#hostname-verification"},"hostname verification"),", you need to append ",(0,a.yg)("inlineCode",{parentName:"p"}," -ext SAN=IP:127.0.0.1,IP:192.168.20.2,DNS:broker.example.com")," to the value of ",(0,a.yg)("inlineCode",{parentName:"p"},"BROKER_COMMON_PARAMS")," as the Subject Alternative Name (SAN).")),(0,a.yg)("h3",{id:"step-2-configure-brokers-1"},"Step 2: Configure brokers"),(0,a.yg)("p",null,"Configure the following parameters in the ",(0,a.yg)("inlineCode",{parentName:"p"},"conf/broker.conf")," file and restrict access to the store files via filesystem permissions."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-properties"},"brokerServicePortTls=6651\nwebServicePortTls=8081\n\n# Trusted client certificates are required to connect TLS\n# Reject the Connection if the Client Certificate is not trusted.\n# In effect, this requires that all connecting clients perform TLS client\n# authentication.\ntlsRequireTrustedClientCertOnConnect=true\ntlsEnabledWithKeyStore=true\n\n# key store\ntlsKeyStoreType=JKS\ntlsKeyStore=/var/private/tls/broker.keystore.jks\ntlsKeyStorePassword=brokerpw\n\n# trust store\ntlsTrustStoreType=JKS\ntlsTrustStore=/var/private/tls/broker.truststore.jks\ntlsTrustStorePassword=brokerpw\n\n# internal client/admin-client config\nbrokerClientTlsEnabled=true\nbrokerClientTlsEnabledWithKeyStore=true\nbrokerClientTlsTrustStoreType=JKS\nbrokerClientTlsTrustStore=/var/private/tls/client.truststore.jks\nbrokerClientTlsTrustStorePassword=clientpw\nbrokerClientTlsKeyStoreType=JKS\nbrokerClientTlsKeyStore=/var/private/tls/client.keystore.jks\nbrokerClientTlsKeyStorePassword=clientpw\n")),(0,a.yg)("p",null,"To disable non-TLS ports, you need to set the values of ",(0,a.yg)("inlineCode",{parentName:"p"},"brokerServicePort")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"webServicePort")," to empty."),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("p",{parentName:"admonition"},"The default value of ",(0,a.yg)("inlineCode",{parentName:"p"},"tlsRequireTrustedClientCertOnConnect")," is ",(0,a.yg)("inlineCode",{parentName:"p"},"false"),", which represents one-way TLS. When it's set to ",(0,a.yg)("inlineCode",{parentName:"p"},"true")," (mutual TLS is enabled), brokers/proxies require trusted client certificates; otherwise, brokers/proxies reject connection requests from clients.")),(0,a.yg)("h3",{id:"step-3-configure-proxies-1"},"Step 3: Configure proxies"),(0,a.yg)("p",null,"Configuring mTLS on proxies includes two directions of connections, from clients to proxies, and from proxies to brokers."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-properties"},"servicePortTls=6651\nwebServicePortTls=8081\n\ntlsRequireTrustedClientCertOnConnect=true\n\n# keystore\ntlsKeyStoreType=JKS\ntlsKeyStore=/var/private/tls/proxy.keystore.jks\ntlsKeyStorePassword=brokerpw\n\n# truststore\ntlsTrustStoreType=JKS\ntlsTrustStore=/var/private/tls/proxy.truststore.jks\ntlsTrustStorePassword=brokerpw\n\n# internal client/admin-client config\ntlsEnabledWithKeyStore=true\nbrokerClientTlsEnabled=true\nbrokerClientTlsEnabledWithKeyStore=true\nbrokerClientTlsTrustStoreType=JKS\nbrokerClientTlsTrustStore=/var/private/tls/client.truststore.jks\nbrokerClientTlsTrustStorePassword=clientpw\nbrokerClientTlsKeyStoreType=JKS\nbrokerClientTlsKeyStore=/var/private/tls/client.keystore.jks\nbrokerClientTlsKeyStorePassword=clientpw\n")),(0,a.yg)("h3",{id:"step-4-configure-clients-1"},"Step 4: Configure clients"),(0,a.yg)("p",null,"Similar to ",(0,a.yg)("a",{parentName:"p",href:"#configure-clients"},"Configure mTLS encryption with PEM"),", you need to provide the TrustStore information for a minimal configuration."),(0,a.yg)("p",null,"The following is an example."),(0,a.yg)(i.A,{groupId:"lang-choice",defaultValue:"Java client",values:[{label:"Java client",value:"Java client"},{label:"Java admin client",value:"Java admin client"}],mdxType:"Tabs"},(0,a.yg)(o.A,{value:"Java client",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-java"},'    import org.apache.pulsar.client.api.PulsarClient;\n\n    PulsarClient client = PulsarClient.builder()\n        .serviceUrl("pulsar+ssl://broker.example.com:6651/")\n        .useKeyStoreTls(true)\n        .tlsTrustStoreType("JKS")\n        .tlsTrustStorePath("/var/private/tls/client.truststore.jks")\n        .tlsTrustStorePassword("clientpw")\n        .tlsKeyStoreType("JKS")\n        .tlsKeyStorePath("/var/private/tls/client.keystore.jks")\n        .tlsKeyStorePassword("clientpw")\n        .enableTlsHostnameVerification(false) // false by default, in any case\n        .allowTlsInsecureConnection(false) // false by default, in any case\n        .build();\n')),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("p",{parentName:"admonition"},"If you set ",(0,a.yg)("inlineCode",{parentName:"p"},"useKeyStoreTls")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),", be sure to configure ",(0,a.yg)("inlineCode",{parentName:"p"},"tlsTrustStorePath"),"."))),(0,a.yg)(o.A,{value:"Java admin client",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-java"},'    PulsarAdmin amdin = PulsarAdmin.builder().serviceHttpUrl("https://broker.example.com:8443")\n        .tlsTrustStoreType("JKS")\n        .tlsTrustStorePath("/var/private/tls/client.truststore.jks")\n        .tlsTrustStorePassword("clientpw")\n        .tlsKeyStoreType("JKS")\n        .tlsKeyStorePath("/var/private/tls/client.keystore.jks")\n        .tlsKeyStorePassword("clientpw")\n        .enableTlsHostnameVerification(false) // false by default, in any case\n        .allowTlsInsecureConnection(false) // false by default, in any case\n        .build();\n')))),(0,a.yg)("h3",{id:"step-5-configure-cli-tools-1"},"Step 5: Configure CLI tools"),(0,a.yg)("p",null,"For ",(0,a.yg)("a",{parentName:"p",href:"/docs/4.0.x/reference-cli-tools"},"Command-line tools")," like ",(0,a.yg)("a",{parentName:"p",href:"pathname:///reference/#/4.0.x/pulsar-admin/"},(0,a.yg)("inlineCode",{parentName:"a"},"pulsar-admin")),", ",(0,a.yg)("a",{parentName:"p",href:"pathname:///reference/#/4.0.x/pulsar-perf/"},(0,a.yg)("inlineCode",{parentName:"a"},"pulsar-perf")),", and ",(0,a.yg)("a",{parentName:"p",href:"pathname:///reference/#/4.0.x/pulsar-client/"},(0,a.yg)("inlineCode",{parentName:"a"},"pulsar-client")),", use the ",(0,a.yg)("inlineCode",{parentName:"p"},"conf/client.conf")," config file in a Pulsar installation."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-properties"},'authPlugin=org.apache.pulsar.client.impl.auth.AuthenticationKeyStoreTls\nauthParams={"keyStoreType":"JKS","keyStorePath":"/var/private/tls/client.keystore.jks","keyStorePassword":"clientpw"}\n')),(0,a.yg)("h2",{id:"enable-tls-logging"},"Enable TLS Logging"),(0,a.yg)("p",null,"You can enable TLS debug logging at the JVM level by starting the brokers and/or clients with ",(0,a.yg)("inlineCode",{parentName:"p"},"javax.net.debug")," system property. For example:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"-Djavax.net.debug=all\n")),(0,a.yg)("p",null,"For more details, see ",(0,a.yg)("a",{parentName:"p",href:"http://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/ReadDebug.html"},"Oracle documentation"),"."))}g.isMDXComponent=!0}}]);