"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[44445],{15680:(e,n,a)=>{a.d(n,{xA:()=>u,yg:()=>d});var s=a(96540);function t(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,s)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){t(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,s,t=function(e,n){if(null==e)return{};var a,s,t={},r=Object.keys(e);for(s=0;s<r.length;s++)a=r[s],n.indexOf(a)>=0||(t[a]=e[a]);return t}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)a=r[s],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var l=s.createContext({}),c=function(e){var n=s.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},u=function(e){var n=c(e.components);return s.createElement(l.Provider,{value:n},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},g=s.forwardRef((function(e,n){var a=e.components,t=e.mdxType,r=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=c(a),g=t,d=m["".concat(l,".").concat(g)]||m[g]||p[g]||r;return a?s.createElement(d,i(i({ref:n},u),{},{components:a})):s.createElement(d,i({ref:n},u))}));function d(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var r=a.length,i=new Array(r);i[0]=g;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[m]="string"==typeof e?e:t,i[1]=o;for(var c=2;c<r;c++)i[c]=a[c];return s.createElement.apply(null,i)}return s.createElement.apply(null,a)}g.displayName="MDXCreateElement"},19365:(e,n,a)=>{a.d(n,{A:()=>i});var s=a(96540),t=a(20053);const r={tabItem:"tabItem_Ymn6"};function i(e){let{children:n,hidden:a,className:i}=e;return s.createElement("div",{role:"tabpanel",className:(0,t.A)(r.tabItem,i),hidden:a},n)}},89089:(e,n,a)=>{a.d(n,{A:()=>w});var s=a(58168),t=a(96540),r=a(20053),i=a(23104),o=a(56347),l=a(57485),c=a(31682),u=a(89466);function m(e){return function(e){return t.Children.map(e,(e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:a,attributes:s,default:t}}=e;return{value:n,label:a,attributes:s,default:t}}))}function p(e){const{values:n,children:a}=e;return(0,t.useMemo)((()=>{const e=n??m(a);return function(e){const n=(0,c.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,a])}function g(e){let{value:n,tabValues:a}=e;return a.some((e=>e.value===n))}function d(e){let{queryString:n=!1,groupId:a}=e;const s=(0,o.W6)(),r=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:n,groupId:a});return[(0,l.aZ)(r),(0,t.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(s.location.search);n.set(r,e),s.replace({...s.location,search:n.toString()})}),[r,s])]}function y(e){const{defaultValue:n,queryString:a=!1,groupId:s}=e,r=p(e),[i,o]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!g({value:n,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=a.find((e=>e.default))??a[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:r}))),[l,c]=d({queryString:a,groupId:s}),[m,y]=function(e){let{groupId:n}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,r]=(0,u.Dv)(a);return[s,(0,t.useCallback)((e=>{a&&r.set(e)}),[a,r])]}({groupId:s}),b=(()=>{const e=l??m;return g({value:e,tabValues:r})?e:null})();(0,t.useLayoutEffect)((()=>{b&&o(b)}),[b]);return{selectedValue:i,selectValue:(0,t.useCallback)((e=>{if(!g({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);o(e),c(e),y(e)}),[c,y,r]),tabValues:r}}var b=a(92303);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function h(e){let{className:n,block:a,selectedValue:o,selectValue:l,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:m}=(0,i.a_)(),p=e=>{const n=e.currentTarget,a=u.indexOf(n),s=c[a].value;s!==o&&(m(n),l(s))},g=e=>{let n=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const a=u.indexOf(e.currentTarget)+1;n=u[a]??u[0];break}case"ArrowLeft":{const a=u.indexOf(e.currentTarget)-1;n=u[a]??u[u.length-1];break}}n?.focus()};return t.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":a},n)},c.map((e=>{let{value:n,label:a,attributes:i}=e;return t.createElement("li",(0,s.A)({role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,key:n,ref:e=>u.push(e),onKeyDown:g,onClick:p},i,{className:(0,r.A)("tabs__item",v.tabItem,i?.className,{"tabs__item--active":o===n})}),a??n)})))}function f(e){let{lazy:n,children:a,selectedValue:s}=e;const r=(Array.isArray(a)?a:[a]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===s));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return t.createElement("div",{className:"margin-top--md"},r.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==s}))))}function N(e){const n=y(e);return t.createElement("div",{className:(0,r.A)("tabs-container",v.tabList)},t.createElement(h,(0,s.A)({},e,n)),t.createElement(f,(0,s.A)({},e,n)))}function w(e){const n=(0,b.A)();return t.createElement(N,(0,s.A)({key:String(n)},e))}},701:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>m});var s=a(58168),t=(a(96540),a(15680)),r=a(89089),i=a(19365);const o={id:"client-libraries-consumers",title:"Work with consumer",sidebar_label:"Work with consumer",description:"Learn how to work with consumers in Pulsar."},l=void 0,c={unversionedId:"client-libraries-consumers",id:"version-3.3.x/client-libraries-consumers",title:"Work with consumer",description:"Learn how to work with consumers in Pulsar.",source:"@site/versioned_docs/version-3.3.x/client-libraries-consumers.md",sourceDirName:".",slug:"/client-libraries-consumers",permalink:"/docs/3.3.x/client-libraries-consumers",draft:!1,editUrl:"https://github.com/apache/pulsar-site/edit/main/versioned_docs/version-3.3.x/client-libraries-consumers.md",tags:[],version:"3.3.x",frontMatter:{id:"client-libraries-consumers",title:"Work with consumer",sidebar_label:"Work with consumer",description:"Learn how to work with consumers in Pulsar."},sidebar:"docsSidebar",previous:{title:"Work with producer",permalink:"/docs/3.3.x/client-libraries-producers"},next:{title:"Work with reader",permalink:"/docs/3.3.x/client-libraries-readers"}},u={},m=[{value:"Subscribe to topics",id:"subscribe-to-topics",level:2},{value:"Exclusive",id:"exclusive",level:4},{value:"Failover",id:"failover",level:4},{value:"Shared",id:"shared",level:4},{value:"Key_shared",id:"key_shared",level:4},{value:"Subscribe to multi-topics",id:"subscribe-to-multi-topics",level:2},{value:"Unsubscribe from topics",id:"unsubscribe-from-topics",level:2},{value:"Receive messages",id:"receive-messages",level:2},{value:"Receive messages with timeout",id:"receive-messages-with-timeout",level:2},{value:"Async receive messages",id:"async-receive-messages",level:2},{value:"Batch receive messages",id:"batch-receive-messages",level:2},{value:"Acknowledge messages",id:"acknowledge-messages",level:2},{value:"Acknowledge messages individually",id:"acknowledge-messages-individually",level:3},{value:"Acknowledge messages cumulatively",id:"acknowledge-messages-cumulatively",level:3},{value:"Negative acknowledgment redelivery backoff",id:"negative-acknowledgment-redelivery-backoff",level:2},{value:"Acknowledgment timeout redelivery backoff",id:"acknowledgment-timeout-redelivery-backoff",level:2},{value:"Configure chunking",id:"configure-chunking",level:2},{value:"Create a consumer with a message listener",id:"create-a-consumer-with-a-message-listener",level:2},{value:"Intercept messages",id:"intercept-messages",level:2}],p={toc:m},g="wrapper";function d(e){let{components:n,...a}=e;return(0,t.yg)(g,(0,s.A)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,t.yg)("p",null,"After setting up your clients, you can explore more to start working with ",(0,t.yg)("a",{parentName:"p",href:"/docs/3.3.x/concepts-clients#consumer"},"consumers"),"."),(0,t.yg)("h2",{id:"subscribe-to-topics"},"Subscribe to topics"),(0,t.yg)("p",null,"Pulsar has various ",(0,t.yg)("a",{parentName:"p",href:"/docs/3.3.x/concepts-messaging#subscription-types"},"subscription types")," to match different scenarios. A topic can have multiple subscriptions with different subscription types. However, a subscription can only have one subscription type at a time."),(0,t.yg)("p",null,"A subscription is identical to the subscription name; a subscription name can specify only one subscription type at a time. To change the subscription type, you should first stop all consumers of this subscription."),(0,t.yg)("p",null,"Different subscription types have different message distribution types. This section describes the differences between subscription types and how to use them."),(0,t.yg)("p",null,'To better describe their differences, assume you have a topic named "my-topic", and the producer has published 10 messages.'),(0,t.yg)(r.A,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"}],mdxType:"Tabs"},(0,t.yg)(i.A,{value:"Java",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},'Producer<String> producer = client.newProducer(Schema.STRING)\n        .topic("my-topic")\n        .enableBatching(false)\n        .create();\n// 3 messages with "key-1", 3 messages with "key-2", 2 messages with "key-3" and 2 messages with "key-4"\nproducer.newMessage().key("key-1").value("message-1-1").send();\nproducer.newMessage().key("key-1").value("message-1-2").send();\nproducer.newMessage().key("key-1").value("message-1-3").send();\nproducer.newMessage().key("key-2").value("message-2-1").send();\nproducer.newMessage().key("key-2").value("message-2-2").send();\nproducer.newMessage().key("key-2").value("message-2-3").send();\nproducer.newMessage().key("key-3").value("message-3-1").send();\nproducer.newMessage().key("key-3").value("message-3-2").send();\nproducer.newMessage().key("key-4").value("message-4-1").send();\nproducer.newMessage().key("key-4").value("message-4-2").send();\n')))),(0,t.yg)("h4",{id:"exclusive"},"Exclusive"),(0,t.yg)("p",null,"Create a new consumer and subscribe with the ",(0,t.yg)("inlineCode",{parentName:"p"},"Exclusive")," subscription type."),(0,t.yg)(r.A,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"}],mdxType:"Tabs"},(0,t.yg)(i.A,{value:"Java",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},'Consumer consumer = client.newConsumer()\n        .topic("my-topic")\n        .subscriptionName("my-subscription")\n        .subscriptionType(SubscriptionType.Exclusive)\n        .subscribe()\n')))),(0,t.yg)("p",null,"Only the first consumer is allowed to the subscription, and other consumers receive an error. The first consumer receives all 10 messages, and the consuming order is the same as the producing order."),(0,t.yg)("admonition",{type:"note"},(0,t.yg)("p",{parentName:"admonition"},"If the topic is partitioned, the first consumer subscribes to all partitioned topics, and other consumers are not assigned with partitions and receive an error.")),(0,t.yg)("h4",{id:"failover"},"Failover"),(0,t.yg)("p",null,"Create new consumers and subscribe with the ",(0,t.yg)("inlineCode",{parentName:"p"},"Failover")," subscription type."),(0,t.yg)(r.A,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"}],mdxType:"Tabs"},(0,t.yg)(i.A,{value:"Java",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},'Consumer consumer1 = client.newConsumer()\n        .topic("my-topic")\n        .subscriptionName("my-subscription")\n        .subscriptionType(SubscriptionType.Failover)\n        .subscribe()\nConsumer consumer2 = client.newConsumer()\n        .topic("my-topic")\n        .subscriptionName("my-subscription")\n        .subscriptionType(SubscriptionType.Failover)\n        .subscribe()\n//conumser1 is the active consumer, consumer2 is the standby consumer.\n//consumer1 receives 5 messages and then crashes, consumer2 takes over as an  active consumer.\n')))),(0,t.yg)("p",null,"Multiple consumers can attach to the same subscription, yet only the first consumer is active, and others are standby. When the active consumer is disconnected, messages will be dispatched to one of standby consumers, and the standby consumer then becomes the active consumer."),(0,t.yg)("p",null,"If the first active consumer is disconnected after receiving 5 messages, the standby consumer becomes active consumer. Consumer1 will receive:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre"},'("key-1", "message-1-1")\n("key-1", "message-1-2")\n("key-1", "message-1-3")\n("key-2", "message-2-1")\n("key-2", "message-2-2")\n')),(0,t.yg)("p",null,"consumer2 will receive:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre"},'("key-2", "message-2-3")\n("key-3", "message-3-1")\n("key-3", "message-3-2")\n("key-4", "message-4-1")\n("key-4", "message-4-2")\n')),(0,t.yg)("admonition",{type:"note"},(0,t.yg)("p",{parentName:"admonition"},"If a topic is a partitioned topic, each partition has only one active consumer, messages of one partition are distributed to only one consumer, and messages of multiple partitions are distributed to multiple consumers.")),(0,t.yg)("h4",{id:"shared"},"Shared"),(0,t.yg)("p",null,"Create new consumers and subscribe with ",(0,t.yg)("inlineCode",{parentName:"p"},"Shared")," subscription type."),(0,t.yg)(r.A,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"}],mdxType:"Tabs"},(0,t.yg)(i.A,{value:"Java",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},'Consumer consumer1 = client.newConsumer()\n        .topic("my-topic")\n        .subscriptionName("my-subscription")\n        .subscriptionType(SubscriptionType.Shared)\n        .subscribe()\n\nConsumer consumer2 = client.newConsumer()\n        .topic("my-topic")\n        .subscriptionName("my-subscription")\n        .subscriptionType(SubscriptionType.Shared)\n        .subscribe()\n//Both consumer1 and consumer2 are active consumers.\n')))),(0,t.yg)("p",null,"In ",(0,t.yg)("inlineCode",{parentName:"p"},"Shared")," subscription type, multiple consumers can attach to the same subscription and messages are delivered in a round-robin distribution across consumers."),(0,t.yg)("p",null,"If a broker dispatches only one message at a time, consumer1 receives the following information."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre"},'("key-1", "message-1-1")\n("key-1", "message-1-3")\n("key-2", "message-2-2")\n("key-3", "message-3-1")\n("key-4", "message-4-1")\n')),(0,t.yg)("p",null,"consumer2 receives the following information."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre"},'("key-1", "message-1-2")\n("key-2", "message-2-1")\n("key-2", "message-2-3")\n("key-3", "message-3-2")\n("key-4", "message-4-2")\n')),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"Shared")," subscription is different from the ",(0,t.yg)("inlineCode",{parentName:"p"},"Exclusive")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"Failover")," subscription types. ",(0,t.yg)("inlineCode",{parentName:"p"},"Shared")," subscription has better flexibility, but cannot provide an ordering guarantee."),(0,t.yg)("h4",{id:"key_shared"},"Key_shared"),(0,t.yg)("p",null,"This is a new subscription type since 2.4.0 release. Create new consumers and subscribe with ",(0,t.yg)("inlineCode",{parentName:"p"},"Key_Shared")," subscription type."),(0,t.yg)(r.A,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"}],mdxType:"Tabs"},(0,t.yg)(i.A,{value:"Java",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},'Consumer consumer1 = client.newConsumer()\n        .topic("my-topic")\n        .subscriptionName("my-subscription")\n        .subscriptionType(SubscriptionType.Key_Shared)\n        .subscribe()\n\nConsumer consumer2 = client.newConsumer()\n        .topic("my-topic")\n        .subscriptionName("my-subscription")\n        .subscriptionType(SubscriptionType.Key_Shared)\n        .subscribe()\n//Both consumer1 and consumer2 are active consumers.\n')))),(0,t.yg)("p",null,"Just like in the ",(0,t.yg)("inlineCode",{parentName:"p"},"Shared")," subscription, all consumers in the ",(0,t.yg)("inlineCode",{parentName:"p"},"Key_Shared")," subscription type can attach to the same subscription. But the ",(0,t.yg)("inlineCode",{parentName:"p"},"Key_Shared")," subscription type is different from the ",(0,t.yg)("inlineCode",{parentName:"p"},"Shared")," subscription. In the ",(0,t.yg)("inlineCode",{parentName:"p"},"Key_Shared")," subscription type, messages with the same key are delivered to only one consumer in order. The possible distribution of messages between different consumers (by default we do not know in advance which keys will be assigned to a consumer, but a key will only be assigned to a consumer at the same time)."),(0,t.yg)("p",null,"consumer1 receives the following information."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre"},'("key-1", "message-1-1")\n("key-1", "message-1-2")\n("key-1", "message-1-3")\n("key-3", "message-3-1")\n("key-3", "message-3-2")\n')),(0,t.yg)("p",null,"consumer2 receives the following information."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre"},'("key-2", "message-2-1")\n("key-2", "message-2-2")\n("key-2", "message-2-3")\n("key-4", "message-4-1")\n("key-4", "message-4-2")\n')),(0,t.yg)("p",null,"If batching is enabled at the producer side, messages with different keys are added to a batch by default. The broker will dispatch the batch to the consumer, so the default batch mechanism may break the Key_Shared subscription guaranteed message distribution semantics. The producer needs to use the ",(0,t.yg)("inlineCode",{parentName:"p"},"KeyBasedBatcher"),"."),(0,t.yg)(r.A,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"}],mdxType:"Tabs"},(0,t.yg)(i.A,{value:"Java",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},'Producer producer = client.newProducer()\n        .topic("my-topic")\n        .batcherBuilder(BatcherBuilder.KEY_BASED)\n        .create();\n')))),(0,t.yg)("p",null,"Or the producer can disable batching."),(0,t.yg)(r.A,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"}],mdxType:"Tabs"},(0,t.yg)(i.A,{value:"Java",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},'Producer producer = client.newProducer()\n        .topic("my-topic")\n        .enableBatching(false)\n        .create();\n')))),(0,t.yg)("admonition",{type:"note"},(0,t.yg)("p",{parentName:"admonition"},"If the message key is not specified, messages without keys are dispatched to one consumer in order by default.")),(0,t.yg)("h2",{id:"subscribe-to-multi-topics"},"Subscribe to multi-topics"),(0,t.yg)("p",null,"In addition to subscribing a consumer to a single Pulsar topic, you can also subscribe to multiple topics simultaneously using ",(0,t.yg)("a",{parentName:"p",href:"/docs/3.3.x/concepts-messaging#multi-topic-subscriptions"},"multi-topic subscriptions"),". To use multi-topic subscriptions you can supply either a regular expression (regex) or a ",(0,t.yg)("inlineCode",{parentName:"p"},"List")," of topics. If you select topics via regex, all topics must be within the same Pulsar namespace."),(0,t.yg)("p",null,"The followings are some examples."),(0,t.yg)(r.A,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"Go",value:"Go"},{label:"Python",value:"Python"}],mdxType:"Tabs"},(0,t.yg)(i.A,{value:"Java",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},'import org.apache.pulsar.client.api.Consumer;\nimport org.apache.pulsar.client.api.PulsarClient;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.regex.Pattern;\n\nConsumerBuilder consumerBuilder = pulsarClient.newConsumer()\n        .subscriptionName(subscription);\n\n// Subscribe to all topics in a namespace\nPattern allTopicsInNamespace = Pattern.compile("public/default/.*");\nConsumer allTopicsConsumer = consumerBuilder\n        .topicsPattern(allTopicsInNamespace)\n        .subscribe();\n\n// Subscribe to a subsets of topics in a namespace, based on regex\nPattern someTopicsInNamespace = Pattern.compile("public/default/foo.*");\nConsumer allTopicsConsumer = consumerBuilder\n        .topicsPattern(someTopicsInNamespace)\n        .subscribe();\n')),(0,t.yg)("p",null,"In the above example, the consumer subscribes to the ",(0,t.yg)("inlineCode",{parentName:"p"},"persistent")," topics that can match the topic name pattern. If you want the consumer subscribes to all ",(0,t.yg)("inlineCode",{parentName:"p"},"persistent")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"non-persistent")," topics that can match the topic name pattern, set ",(0,t.yg)("inlineCode",{parentName:"p"},"subscriptionTopicsMode")," to ",(0,t.yg)("inlineCode",{parentName:"p"},"RegexSubscriptionMode.AllTopics"),"."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},'Pattern pattern = Pattern.compile("public/default/.*");\npulsarClient.newConsumer()\n        .subscriptionName("my-sub")\n        .topicsPattern(pattern)\n        .subscriptionTopicsMode(RegexSubscriptionMode.AllTopics)\n        .subscribe();\n')),(0,t.yg)("admonition",{type:"note"},(0,t.yg)("p",{parentName:"admonition"},"By default, the ",(0,t.yg)("inlineCode",{parentName:"p"},"subscriptionTopicsMode")," of the consumer is ",(0,t.yg)("inlineCode",{parentName:"p"},"PersistentOnly"),". Available options of ",(0,t.yg)("inlineCode",{parentName:"p"},"subscriptionTopicsMode")," are ",(0,t.yg)("inlineCode",{parentName:"p"},"PersistentOnly"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"NonPersistentOnly"),", and ",(0,t.yg)("inlineCode",{parentName:"p"},"AllTopics"),".")),(0,t.yg)("p",null,"You can also subscribe to an explicit list of topics (across namespaces if you wish):"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},'List<String> topics = Arrays.asList(\n        "topic-1",\n        "topic-2",\n        "topic-3"\n);\n\nConsumer multiTopicConsumer = consumerBuilder\n        .topics(topics)\n        .subscribe();\n\n// Alternatively:\nConsumer multiTopicConsumer = consumerBuilder\n        .topic(\n            "topic-1",\n            "topic-2",\n            "topic-3"\n        )\n        .subscribe();\n')),(0,t.yg)("p",null,"You can also subscribe to multiple topics asynchronously using the ",(0,t.yg)("inlineCode",{parentName:"p"},"subscribeAsync")," method rather than the synchronous ",(0,t.yg)("inlineCode",{parentName:"p"},"subscribe")," method. The following is an example."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},'Pattern allTopicsInNamespace = Pattern.compile("persistent://public/default.*");\nconsumerBuilder\n        .topics(topics)\n        .subscribeAsync()\n        .thenAccept(this::receiveMessageFromConsumer);\n\nprivate void receiveMessageFromConsumer(Object consumer) {\n    ((Consumer)consumer).receiveAsync().thenAccept(message -> {\n                // Do something with the received message\n                receiveMessageFromConsumer(consumer);\n            });\n}\n'))),(0,t.yg)(i.A,{value:"Go",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-go"},'client, err := pulsar.NewClient(pulsar.ClientOptions{\n    URL: "pulsar://localhost:6650",\n})\nif err != nil {\n    log.Fatal(err)\n}\n\ntopics := []string{"topic-1", "topic-2"}\nconsumer, err := client.Subscribe(pulsar.ConsumerOptions{\n    // fill `Topics` field will create a multi-topic consumer\n    Topics:           topics,\n    SubscriptionName: "multi-topic-sub",\n})\nif err != nil {\n    log.Fatal(err)\n}\ndefer consumer.Close()\n'))),(0,t.yg)(i.A,{value:"Python",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"import re\nconsumer = client.subscribe(re.compile('persistent://public/default/topic-*'), 'my-subscription')\nwhile True:\n    msg = consumer.receive()\n    try:\n        print(\"Received message '{}' id='{}'\".format(msg.data(), msg.message_id()))\n        # Acknowledge successful processing of the message\n        consumer.acknowledge(msg)\n    except Exception:\n        # Message failed to be processed\n        consumer.negative_acknowledge(msg)\nclient.close()\n")))),(0,t.yg)("h2",{id:"unsubscribe-from-topics"},"Unsubscribe from topics"),(0,t.yg)("p",null,"This example shows how a consumer unsubscribes from a topic."),(0,t.yg)(r.A,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"C#",value:"C#"}],mdxType:"Tabs"},(0,t.yg)(i.A,{value:"Java",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},"consumer.unsubscribe();\n"))),(0,t.yg)(i.A,{value:"C#",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-csharp"},"await consumer.Unsubscribe();\n")))),(0,t.yg)("admonition",{type:"note"},(0,t.yg)("p",{parentName:"admonition"},"A consumer cannot be used and is disposed once the consumer unsubscribes from a topic.")),(0,t.yg)("h2",{id:"receive-messages"},"Receive messages"),(0,t.yg)("p",null,"This example shows how a consumer receives messages from a topic."),(0,t.yg)(r.A,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"C#",value:"C#"}],mdxType:"Tabs"},(0,t.yg)(i.A,{value:"Java",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},"Message message = consumer.receive();\n"))),(0,t.yg)(i.A,{value:"C#",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-csharp"},'await foreach (var message in consumer.Messages())\n{\n    Console.WriteLine("Received: " + Encoding.UTF8.GetString(message.Data.ToArray()));\n}\n')))),(0,t.yg)("h2",{id:"receive-messages-with-timeout"},"Receive messages with timeout"),(0,t.yg)(r.A,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"Go",value:"Go"}],mdxType:"Tabs"},(0,t.yg)(i.A,{value:"Java",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},"consumer.receive(10, TimeUnit.SECONDS);\n"))),(0,t.yg)(i.A,{value:"Go",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-go"},'client, err := pulsar.NewClient(pulsar.ClientOptions{\n    URL: "pulsar://localhost:6650",\n})\nif err != nil {\n    log.Fatal(err)\n}\ndefer client.Close()\n\ntopic := "test-topic-with-no-messages"\nctx, cancel := context.WithTimeout(context.Background(), 500*time.Millisecond)\ndefer cancel()\n\n// create consumer\nconsumer, err := client.Subscribe(pulsar.ConsumerOptions{\n    Topic:            topic,\n    SubscriptionName: "my-sub1",\n    Type:             pulsar.Shared,\n})\nif err != nil {\n    log.Fatal(err)\n}\ndefer consumer.Close()\n\n// receive message with a timeout\nmsg, err := consumer.Receive(ctx)\nif err != nil {\n    log.Fatal(err)\n}\nfmt.Println(msg.Payload())\n')))),(0,t.yg)("h2",{id:"async-receive-messages"},"Async receive messages"),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"receive")," method receives messages synchronously (the consumer process is blocked until a message is available). You can also use ",(0,t.yg)("a",{parentName:"p",href:"/docs/3.3.x/concepts-clients#receive-modes"},"async receive"),", which returns a ",(0,t.yg)("a",{parentName:"p",href:"http://www.baeldung.com/java-completablefuture"},(0,t.yg)("inlineCode",{parentName:"a"},"CompletableFuture"))," object immediately once a new message is available."),(0,t.yg)("p",null,"The following is an example."),(0,t.yg)(r.A,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"}],mdxType:"Tabs"},(0,t.yg)(i.A,{value:"Java",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},"CompletableFuture<Message> asyncMessage = consumer.receiveAsync();\n")),(0,t.yg)("p",null,"   Async receive operations return a ",(0,t.yg)("a",{parentName:"p",href:"https://pulsar.apache.org/api/client/3.3.x/org/apache/pulsar/client/api/Message"},"Message")," wrapped inside of a ",(0,t.yg)("a",{parentName:"p",href:"http://www.baeldung.com/java-completablefuture"},(0,t.yg)("inlineCode",{parentName:"a"},"CompletableFuture")),"."))),(0,t.yg)("h2",{id:"batch-receive-messages"},"Batch receive messages"),(0,t.yg)("p",null,"Use ",(0,t.yg)("inlineCode",{parentName:"p"},"batchReceive")," to receive multiple messages for each call."),(0,t.yg)("p",null,"The following is an example."),(0,t.yg)(r.A,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"}],mdxType:"Tabs"},(0,t.yg)(i.A,{value:"Java",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},"Messages messages = consumer.batchReceive();\nfor (Object message : messages) {\n  // do something\n}\nconsumer.acknowledge(messages)\n")))),(0,t.yg)("admonition",{type:"note"},(0,t.yg)("p",{parentName:"admonition"},"Batch receive policy limits the number and bytes of messages in a single batch. You can specify a timeout to wait for enough messages.\nThe batch receive is completed if any of the following conditions are met: enough number of messages, bytes of messages, wait timeout."),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",{parentName:"pre",className:"language-java"},'Consumer consumer = client.newConsumer()\n.topic("my-topic")\n.subscriptionName("my-subscription")\n.batchReceivePolicy(BatchReceivePolicy.builder()\n.maxNumMessages(100)\n.maxNumBytes(1024 * 1024)\n.timeout(200, TimeUnit.MILLISECONDS)\n.build())\n.subscribe();\n')),(0,t.yg)("p",{parentName:"admonition"},"The default batch receive policy is:"),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",{parentName:"pre",className:"language-java"},"BatchReceivePolicy.builder()\n.maxNumMessage(-1)\n.maxNumBytes(10 * 1024 * 1024)\n.timeout(100, TimeUnit.MILLISECONDS)\n.build();\n"))),(0,t.yg)("h2",{id:"acknowledge-messages"},"Acknowledge messages"),(0,t.yg)("p",null,"Messages can be acknowledged individually or cumulatively. For details about message acknowledgment, see ",(0,t.yg)("a",{parentName:"p",href:"/docs/3.3.x/concepts-messaging#acknowledgment"},"acknowledgment"),"."),(0,t.yg)("h3",{id:"acknowledge-messages-individually"},"Acknowledge messages individually"),(0,t.yg)(r.A,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"C#",value:"C#"}],mdxType:"Tabs"},(0,t.yg)(i.A,{value:"Java",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},"consumer.acknowledge(msg);\n"))),(0,t.yg)(i.A,{value:"C#",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-csharp"},"await consumer.Acknowledge(message);\n")))),(0,t.yg)("h3",{id:"acknowledge-messages-cumulatively"},"Acknowledge messages cumulatively"),(0,t.yg)(r.A,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"C#",value:"C#"}],mdxType:"Tabs"},(0,t.yg)(i.A,{value:"Java",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},"consumer.acknowledgeCumulative(msg);\n"))),(0,t.yg)(i.A,{value:"C#",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-csharp"},"await consumer.AcknowledgeCumulative(message);\n")))),(0,t.yg)("h2",{id:"negative-acknowledgment-redelivery-backoff"},"Negative acknowledgment redelivery backoff"),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"RedeliveryBackoff")," introduces a redelivery backoff mechanism. You can achieve redelivery with different delays by setting the redelivery count of messages."),(0,t.yg)(r.A,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"}],mdxType:"Tabs"},(0,t.yg)(i.A,{value:"Java",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},'Consumer consumer =  client.newConsumer()\n        .topic("my-topic")\n        .subscriptionName("my-subscription")\n        .negativeAckRedeliveryBackoff(MultiplierRedeliveryBackoff.builder()\n                .minDelayMs(1000)\n                .maxDelayMs(60 * 1000)\n                .build())\n        .subscribe();\n')))),(0,t.yg)("h2",{id:"acknowledgment-timeout-redelivery-backoff"},"Acknowledgment timeout redelivery backoff"),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"RedeliveryBackoff")," introduces a redelivery backoff mechanism. You can redeliver messages with different delays by setting the number of times the messages are retried."),(0,t.yg)(r.A,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"}],mdxType:"Tabs"},(0,t.yg)(i.A,{value:"Java",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},'Consumer consumer =  client.newConsumer()\n        .topic("my-topic")\n        .subscriptionName("my-subscription")\n        .ackTimeout(10, TimeUnit.SECOND)\n        .ackTimeoutRedeliveryBackoff(MultiplierRedeliveryBackoff.builder()\n                .minDelayMs(1000)\n                .maxDelayMs(60000)\n                .multiplier(2)\n                .build())\n        .subscribe();\n')))),(0,t.yg)("p",null,"The message redelivery behavior should be as follows."),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:"left"},"Redelivery count"),(0,t.yg)("th",{parentName:"tr",align:"left"},"Redelivery delay"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:"left"},"1"),(0,t.yg)("td",{parentName:"tr",align:"left"},"10 + 1 seconds")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:"left"},"2"),(0,t.yg)("td",{parentName:"tr",align:"left"},"10 + 2 seconds")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:"left"},"3"),(0,t.yg)("td",{parentName:"tr",align:"left"},"10 + 4 seconds")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:"left"},"4"),(0,t.yg)("td",{parentName:"tr",align:"left"},"10 + 8 seconds")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:"left"},"5"),(0,t.yg)("td",{parentName:"tr",align:"left"},"10 + 16 seconds")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:"left"},"6"),(0,t.yg)("td",{parentName:"tr",align:"left"},"10 + 32 seconds")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:"left"},"7"),(0,t.yg)("td",{parentName:"tr",align:"left"},"10 + 60 seconds")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:"left"},"8"),(0,t.yg)("td",{parentName:"tr",align:"left"},"10 + 60 seconds")))),(0,t.yg)("admonition",{type:"note"},(0,t.yg)("ul",{parentName:"admonition"},(0,t.yg)("li",{parentName:"ul"},"The ",(0,t.yg)("inlineCode",{parentName:"li"},"negativeAckRedeliveryBackoff")," does not work with ",(0,t.yg)("inlineCode",{parentName:"li"},"consumer.negativeAcknowledge(MessageId messageId)")," because you are not able to get the redelivery count from the message ID."),(0,t.yg)("li",{parentName:"ul"},"If a consumer crashes, it triggers the redelivery of unacked messages. In this case, ",(0,t.yg)("inlineCode",{parentName:"li"},"RedeliveryBackoff")," does not take effect and the messages might get redelivered earlier than the delay time from the backoff."))),(0,t.yg)("h2",{id:"configure-chunking"},"Configure chunking"),(0,t.yg)("p",null,"You can limit the maximum number of chunked messages a consumer maintains concurrently by configuring specific parameters. When the configured threshold is reached, the consumer drops pending messages by silently acknowledging them or asking the broker to redeliver them later."),(0,t.yg)("p",null,"The following is an example of how to configure message chunking."),(0,t.yg)(r.A,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"C++",value:"C++"},{label:"Go",value:"Go"},{label:"Python",value:"Python"}],mdxType:"Tabs"},(0,t.yg)(i.A,{value:"Java",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},'Consumer<byte[]> consumer = client.newConsumer()\n     .topic(topic)\n     .subscriptionName("test")\n     .autoAckOldestChunkedMessageOnQueueFull(true)\n     .maxPendingChunkedMessage(100)\n     .expireTimeOfIncompleteChunkedMessage(10, TimeUnit.MINUTES)\n     .subscribe();\n'))),(0,t.yg)(i.A,{value:"C++",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},'ConsumerConfiguration conf;\nconf.setAutoAckOldestChunkedMessageOnQueueFull(true);\nconf.setMaxPendingChunkedMessage(100);\nConsumer consumer;\nclient.subscribe("my-topic", "my-sub", conf, consumer);\n'))),(0,t.yg)(i.A,{value:"Go",mdxType:"TabItem"},"Coming soon..."),(0,t.yg)(i.A,{value:"Python",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'consumer = client.subscribe(topic, "my-subscription",\n                 max_pending_chunked_message=10,\n                 auto_ack_oldest_chunked_message_on_queue_full=False\n                 )\n')))),(0,t.yg)("h2",{id:"create-a-consumer-with-a-message-listener"},"Create a consumer with a message listener"),(0,t.yg)("p",null,"You can avoid running a loop by blocking calls with an event-based style by using a message listener which is invoked for each message that is received."),(0,t.yg)(r.A,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"C++",value:"C++"},{label:"Go",value:"Go"}],mdxType:"Tabs"},(0,t.yg)(i.A,{value:"Java",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},'Consumer<String> consumer = pulsarClient.newConsumer(Schema.STRING)\n                      .topic("persistent://my-property/my-ns/my-topic")\n                      .subscriptionName("my-subscription")\n                      .messageListener((c, m) -> {\n                          try {\n                              c.acknowledge(m);\n                          } catch (Exception e) {\n                              Assert.fail("Failed to acknowledge", e);\n                          }\n                      })\n                      .subscribe();\n'))),(0,t.yg)(i.A,{value:"C++",mdxType:"TabItem"},(0,t.yg)("p",null,"This example starts a subscription at the earliest offset and consumes 100 messages."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},'#include <pulsar/Client.h>\n#include <atomic>\n#include <thread>\n\nusing namespace pulsar;\n\nstd::atomic<uint32_t> messagesReceived;\n\nvoid handleAckComplete(Result res) {\n    std::cout << "Ack res: " << res << std::endl;\n}\n\nvoid listener(Consumer consumer, const Message& msg) {\n    std::cout << "Got message " << msg << " with content \'" << msg.getDataAsString() << "\'" << std::endl;\n    messagesReceived++;\n    consumer.acknowledgeAsync(msg.getMessageId(), handleAckComplete);\n}\n\nint main() {\n    Client client("pulsar://localhost:6650");\n\n    Consumer consumer;\n    ConsumerConfiguration config;\n    config.setMessageListener(listener);\n    config.setSubscriptionInitialPosition(InitialPositionEarliest);\n    Result result = client.subscribe("persistent://public/default/my-topic", "consumer-1", config, consumer);\n    if (result != ResultOk) {\n        std::cout << "Failed to subscribe: " << result << std::endl;\n        return -1;\n    }\n\n    // wait for 100 messages to be consumed\n    while (messagesReceived < 100) {\n        std::this_thread::sleep_for(std::chrono::milliseconds(100));\n    }\n\n    std::cout << "Finished consuming asynchronously!" << std::endl;\n\n    client.close();\n    return 0;\n}\n'))),(0,t.yg)(i.A,{value:"Go",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-go"},'import (\n    "fmt"\n    "log"\n\n    "github.com/apache/pulsar-client-go/pulsar"\n)\n\nfunc main() {\n    client, err := pulsar.NewClient(pulsar.ClientOptions{URL: "pulsar://localhost:6650"})\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    defer client.Close()\n\n    // we can listen this channel\n    channel := make(chan pulsar.ConsumerMessage, 100)\n\n    options := pulsar.ConsumerOptions{\n        Topic:            "topic-1",\n        SubscriptionName: "my-subscription",\n        Type:             pulsar.Shared,\n        // fill `MessageChannel` field will create a listener\n        MessageChannel: channel,\n    }\n\n    consumer, err := client.Subscribe(options)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    defer consumer.Close()\n\n    // Receive messages from channel. The channel returns a struct `ConsumerMessage` which contains message and the consumer from where\n    // the message was received. It\'s not necessary here since we have 1 single consumer, but the channel could be\n    // shared across multiple consumers as well\n    for cm := range channel {\n        consumer := cm.Consumer\n        msg := cm.Message\n        fmt.Printf("Consumer %s received a message, msgId: %v, content: \'%s\'\\n",\n            consumer.Name(), msg.ID(), string(msg.Payload()))\n\n        consumer.Ack(msg)\n    }\n}\n')))),(0,t.yg)("h2",{id:"intercept-messages"},"Intercept messages"),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"ConsumerInterceptor"),"s intercept and possibly mutate messages received by the consumer."),(0,t.yg)("p",null,"The interface has six main events:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"beforeConsume")," is triggered before the message is returned by ",(0,t.yg)("inlineCode",{parentName:"li"},"receive()")," or ",(0,t.yg)("inlineCode",{parentName:"li"},"receiveAsync()"),". You can modify messages within this event."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"onAcknowledge")," is triggered before the consumer sends the acknowledgement to the broker."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"onAcknowledgeCumulative")," is triggered before the consumer sends the cumulative acknowledgement to the broker."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"onNegativeAcksSend")," is triggered when a redelivery from a negative acknowledgement occurs."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"onAckTimeoutSend")," is triggered when a redelivery from an acknowledgement timeout occurs."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"onPartitionsChange")," is triggered when the partitions of the (partitioned) topic change.")),(0,t.yg)("p",null,"To intercept messages, you can add one or multiple ",(0,t.yg)("inlineCode",{parentName:"p"},"ConsumerInterceptor"),"s when creating a ",(0,t.yg)("inlineCode",{parentName:"p"},"Consumer")," as follows."),(0,t.yg)(r.A,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"}],mdxType:"Tabs"},(0,t.yg)(i.A,{value:"Java",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},'Consumer<String> consumer = client.newConsumer()\n     .topic("my-topic")\n     .subscriptionName("my-subscription")\n     .intercept(new ConsumerInterceptor<String> {\n           @Override\n           public Message<String> beforeConsume(Consumer<String> consumer, Message<String> message) {\n               // user-defined processing logic\n           }\n\n           @Override\n           public void onAcknowledge(Consumer<String> consumer, MessageId messageId, Throwable cause) {\n               // user-defined processing logic\n           }\n\n           @Override\n           public void onAcknowledgeCumulative(Consumer<String> consumer, MessageId messageId, Throwable cause) {\n               // user-defined processing logic\n           }\n\n           @Override\n           public void onNegativeAcksSend(Consumer<String> consumer, Set<MessageId> messageIds) {\n               // user-defined processing logic\n           }\n\n           @Override\n           public void onAckTimeoutSend(Consumer<String> consumer, Set<MessageId> messageIds) {\n               // user-defined processing logic\n           }\n\n           @Override\n           public void onPartitionsChange(String topicName, int partitions) {\n               // user-defined processing logic\n           }\n     })\n     .subscribe();\n')))),(0,t.yg)("admonition",{type:"note"},(0,t.yg)("p",{parentName:"admonition"},"If you are using multiple interceptors, they apply in the order they are passed to the ",(0,t.yg)("inlineCode",{parentName:"p"},"intercept")," method.")))}d.isMDXComponent=!0}}]);