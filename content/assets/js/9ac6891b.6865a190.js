"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[39626],{67282:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>o});var t=s(74848),i=s(28453);const a={id:"functions-quickstart",title:"Get started with Pulsar Functions",sidebar_label:"Get started",original_id:"functions-quickstart"},r=void 0,l={id:"functions-quickstart",title:"Get started with Pulsar Functions",description:"This tutorial walks you through running a standalone Pulsar cluster on your machine, and then running your first Pulsar Function using that cluster. The first Pulsar Function runs in local run mode (outside your Pulsar cluster), while the second runs in cluster mode (inside your cluster).",source:"@site/versioned_docs/version-2.4.0/functions-quickstart.md",sourceDirName:".",slug:"/functions-quickstart",permalink:"/docs/2.4.0/functions-quickstart",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/pulsar-site/edit/main/versioned_docs/version-2.4.0/functions-quickstart.md",tags:[],version:"2.4.0",frontMatter:{id:"functions-quickstart",title:"Get started with Pulsar Functions",sidebar_label:"Get started",original_id:"functions-quickstart"},sidebar:"docsSidebar",previous:{title:"Overview",permalink:"/docs/2.4.0/functions-overview"},next:{title:"API",permalink:"/docs/2.4.0/functions-api"}},c={},o=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Run a standalone Pulsar cluster",id:"run-a-standalone-pulsar-cluster",level:2},{value:"Run a Pulsar Function in local run mode",id:"run-a-pulsar-function-in-local-run-mode",level:2},{value:"Multiple input topics",id:"multiple-input-topics",level:4},{value:"Process explanation",id:"process-explanation",level:3},{value:"Run a Pulsar Function in cluster mode",id:"run-a-pulsar-function-in-cluster-mode",level:2},{value:"Write and run a new function",id:"write-and-run-a-new-function",level:2},{value:"Write and run a Go function",id:"write-and-run-a-go-function",level:2},{value:"Package Python dependencies",id:"package-python-dependencies",level:2},{value:"Client requirements",id:"client-requirements",level:3},{value:"Python dependencies",id:"python-dependencies",level:3},{value:"Package",id:"package",level:4}];function u(n){const e={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:["This tutorial walks you through running a ",(0,t.jsx)(e.a,{href:"/docs/2.4.0/reference-terminology#standalone",children:"standalone"})," Pulsar ",(0,t.jsx)(e.a,{href:"/docs/2.4.0/reference-terminology#cluster",children:"cluster"})," on your machine, and then running your first Pulsar Function using that cluster. The first Pulsar Function runs in local run mode (outside your Pulsar ",(0,t.jsx)(e.a,{href:"/docs/2.4.0/reference-terminology#cluster",children:"cluster"}),"), while the second runs in cluster mode (inside your cluster)."]}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:"In local run mode, Pulsar Functions communicate with Pulsar cluster, but run outside of the cluster."}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(e.p,{children:["Install ",(0,t.jsx)(e.a,{href:"https://maven.apache.org/download.cgi",children:"Maven"})," on your machine."]}),"\n",(0,t.jsx)(e.h2,{id:"run-a-standalone-pulsar-cluster",children:"Run a standalone Pulsar cluster"}),"\n",(0,t.jsxs)(e.p,{children:["In order to run Pulsar Functions, you need to run a Pulsar cluster locally first. The easiest way is to run Pulsar in ",(0,t.jsx)(e.a,{href:"/docs/2.4.0/reference-terminology#standalone",children:"standalone"})," mode. Follow these steps to start up a standalone cluster."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"\n$ wget https://archive.apache.org/dist/pulsar/pulsar-2.4.0/apache-pulsar-2.4.0-bin.tar.gz\n$ tar xvfz apache-pulsar-2.4.0-bin.tar.gz\n$ cd apache-pulsar-2.4.0\n$ bin/pulsar standalone \\\n  --advertised-address 127.0.0.1\n\n"})}),"\n",(0,t.jsxs)(e.p,{children:["When running Pulsar in standalone mode, the ",(0,t.jsx)(e.code,{children:"public"})," tenant and the ",(0,t.jsx)(e.code,{children:"default"})," namespace are created automatically. The tenant and namespace are used throughout this tutorial."]}),"\n",(0,t.jsx)(e.h2,{id:"run-a-pulsar-function-in-local-run-mode",children:"Run a Pulsar Function in local run mode"}),"\n",(0,t.jsx)(e.p,{children:"You can start with a simple function that takes a string as input from a Pulsar topic, adds an exclamation point to the end of the string, and then publishes the new string to another Pulsar topic. The following is the code for the function."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'\npackage org.apache.pulsar.functions.api.examples;\n\nimport java.util.function.Function;\n\npublic class ExclamationFunction implements Function<String, String> {\n    @Override\n    public String apply(String input) {\n        return String.format("%s!", input);\n    }\n}\n\n'})}),"\n",(0,t.jsxs)(e.p,{children:["A JAR file containing this function and several other functions (written in Java) is included with the binary distribution you have downloaded (in the ",(0,t.jsx)(e.code,{children:"examples"})," folder). Run the function in local mode on your laptop but outside your Pulsar cluster with the following commands."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"\n$ bin/pulsar-admin functions localrun \\\n  --jar examples/api-examples.jar \\\n  --classname org.apache.pulsar.functions.api.examples.ExclamationFunction \\\n  --inputs persistent://public/default/exclamation-input \\\n  --output persistent://public/default/exclamation-output \\\n  --name exclamation\n\n"})}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.h4,{id:"multiple-input-topics",children:"Multiple input topics"}),"\n",(0,t.jsxs)(e.p,{children:["In the example above, a single topic is specified using the ",(0,t.jsx)(e.code,{children:"--inputs"})," flag. You can also specify multiple input topics with a comma-separated list using the same flag."]}),"\n"]}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"\n--inputs topic1,topic2\n\n\n"})}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:["You can open up another shell and use the ",(0,t.jsx)(e.a,{href:"/docs/2.4.0/reference-cli-tools#pulsar-client",children:(0,t.jsx)(e.code,{children:"pulsar-client"})})," tool to listen for messages on the output topic."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"\n$ bin/pulsar-client consume persistent://public/default/exclamation-output \\\n  --subscription-name my-subscription \\\n  --num-messages 0\n\n"})}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsxs)(e.p,{children:["Setting the ",(0,t.jsx)(e.code,{children:"--num-messages"})," flag to ",(0,t.jsx)(e.code,{children:"0"})," means that consumers listen on the topic indefinitely, rather than only accepting a certain number of messages."]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"With a listener up and running, you can open up another shell and produce a message on the input topic that you specify."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'\n$ bin/pulsar-client produce persistent://public/default/exclamation-input \\\n  --num-produce 1 \\\n  --messages "Hello world"\n\n'})}),"\n",(0,t.jsxs)(e.p,{children:["When the message has been successfully processed by the exclamation function, you will see the following output. To shut down the function, press ",(0,t.jsx)(e.strong,{children:"Ctrl+C"}),"."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"\n----- got message -----\nHello world!\n\n"})}),"\n",(0,t.jsx)(e.h3,{id:"process-explanation",children:"Process explanation"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["The ",(0,t.jsx)(e.code,{children:"Hello world"})," message you publish to the input topic (",(0,t.jsx)(e.code,{children:"persistent://public/default/exclamation-input"}),") is passed to the exclamation function."]}),"\n",(0,t.jsxs)(e.li,{children:["The exclamation function processes the message (providing a result of ",(0,t.jsx)(e.code,{children:"Hello world!"}),") and publishes the result to the output topic (",(0,t.jsx)(e.code,{children:"persistent://public/default/exclamation-output"}),")."]}),"\n",(0,t.jsxs)(e.li,{children:["If the exclamation function ",(0,t.jsx)(e.em,{children:"does not"})," run, Pulsar will durably store the message data published to the input topic in ",(0,t.jsx)(e.a,{href:"https://bookkeeper.apache.org",children:"Apache BookKeeper"})," until a consumer consumes and acknowledges the message."]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"run-a-pulsar-function-in-cluster-mode",children:"Run a Pulsar Function in cluster mode"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.a,{href:"#run-a-pulsar-function-in-local-run-mode",children:"Local run mode"})," is useful for development and test. However, when you use Pulsar for real deployment, you run it in ",(0,t.jsx)(e.strong,{children:"cluster mode"}),". In cluster mode, Pulsar Functions run ",(0,t.jsx)(e.em,{children:"inside"})," of your Pulsar cluster and are managed using the same ",(0,t.jsx)(e.a,{href:"/docs/2.4.0/reference-ulsar-admin#functions",children:(0,t.jsx)(e.code,{children:"pulsar-admin functions"})})," interface."]}),"\n",(0,t.jsx)(e.p,{children:"The following command deploys the same exclamation function you run locally in your Pulsar cluster, rather than outside of it."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"\n$ bin/pulsar-admin functions create \\\n  --jar examples/api-examples.jar \\\n  --classname org.apache.pulsar.functions.api.examples.ExclamationFunction \\\n  --inputs persistent://public/default/exclamation-input \\\n  --output persistent://public/default/exclamation-output \\\n  --name exclamation\n\n"})}),"\n",(0,t.jsxs)(e.p,{children:["You will see ",(0,t.jsx)(e.code,{children:"Created successfully"})," in the output. Check the list of functions running in your cluster."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"\n$ bin/pulsar-admin functions list \\\n  --tenant public \\\n  --namespace default\n\n"})}),"\n",(0,t.jsxs)(e.p,{children:["You will see the ",(0,t.jsx)(e.code,{children:"exclamation"})," function. Check the status of your deployed function using the ",(0,t.jsx)(e.code,{children:"getstatus"})," command."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"\n$ bin/pulsar-admin functions getstatus \\\n  --tenant public \\\n  --namespace default \\\n  --name exclamation\n\n"})}),"\n",(0,t.jsx)(e.p,{children:"You will see the following JSON output."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'\n{\n  "functionStatusList": [\n    {\n      "running": true,\n      "instanceId": "0"\n    }\n  ]\n}\n\n'})}),"\n",(0,t.jsxs)(e.p,{children:["As you can see, the instance is currently running, and an instance with the ID of ",(0,t.jsx)(e.code,{children:"0"})," is running. With the ",(0,t.jsx)(e.code,{children:"get"})," command, you can get other information about the function, for example, topics, tenant, namespace, and so on."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"\n$ bin/pulsar-admin functions get \\\n  --tenant public \\\n  --namespace default \\\n  --name exclamation\n\n"})}),"\n",(0,t.jsx)(e.p,{children:"You will see the following JSON output."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'\n{\n  "tenant": "public",\n  "namespace": "default",\n  "name": "exclamation",\n  "className": "org.apache.pulsar.functions.api.examples.ExclamationFunction",\n  "output": "persistent://public/default/exclamation-output",\n  "autoAck": true,\n  "inputs": [\n    "persistent://public/default/exclamation-input"\n  ],\n  "parallelism": 1\n}\n\n'})}),"\n",(0,t.jsxs)(e.p,{children:["As you can see, only one instance of the function is running in your cluster. Update the parallel functions to ",(0,t.jsx)(e.code,{children:"3"})," using the ",(0,t.jsx)(e.code,{children:"update"})," command."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"\n$ bin/pulsar-admin functions update \\\n  --jar examples/api-examples.jar \\\n  --classname org.apache.pulsar.functions.api.examples.ExclamationFunction \\\n  --inputs persistent://public/default/exclamation-input \\\n  --output persistent://public/default/exclamation-output \\\n  --tenant public \\\n  --namespace default \\\n  --name exclamation \\\n  --parallelism 3\n\n"})}),"\n",(0,t.jsxs)(e.p,{children:["You will see ",(0,t.jsx)(e.code,{children:"Updated successfully"})," in the output. If you enter the ",(0,t.jsx)(e.code,{children:"get"})," command, you see that the parallel functions are increased to ",(0,t.jsx)(e.code,{children:"3"}),", meaning that three instances of the function are running in your cluster."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'\n{\n  "tenant": "public",\n  "namespace": "default",\n  "name": "exclamation",\n  "className": "org.apache.pulsar.functions.api.examples.ExclamationFunction",\n  "output": "persistent://public/default/exclamation-output",\n  "autoAck": true,\n  "inputs": [\n    "persistent://public/default/exclamation-input"\n  ],\n  "parallelism": 3\n}\n\n'})}),"\n",(0,t.jsxs)(e.p,{children:["Shut down the running function with the ",(0,t.jsx)(e.code,{children:"delete"})," command."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"\n$ bin/pulsar-admin functions delete \\\n  --tenant public \\\n  --namespace default \\\n  --name exclamation\n\n"})}),"\n",(0,t.jsxs)(e.p,{children:["When you see ",(0,t.jsx)(e.code,{children:"Deleted successfully"})," in the output, you've successfully run, updated, and shut down functions running in cluster mode."]}),"\n",(0,t.jsx)(e.h2,{id:"write-and-run-a-new-function",children:"Write and run a new function"}),"\n",(0,t.jsxs)(e.p,{children:["In order to write and run ",(0,t.jsx)(e.a,{href:"/docs/2.4.0/functions-api#functions-for-python",children:"Python"})," functions, you need to install some dependencies."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"\n$ pip install pulsar-client\n\n"})}),"\n",(0,t.jsx)(e.p,{children:"In the examples above, you run and manage pre-written Pulsar Functions and learn how they work. You can also write your own functions with Python API. In the following example, the function takes a string as input, reverses the string, and publishes the reversed string to the specified topic."}),"\n",(0,t.jsx)(e.p,{children:"First, create a new Python file."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"\n$ touch reverse.py\n\n"})}),"\n",(0,t.jsx)(e.p,{children:"Add the following information in the Python file."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"\ndef process(input):\n    return input[::-1]\n\n"})}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"process"})," method defines the processing logic of Pulsar Functions. It uses Python slice magic to reverse each incoming string. You can deploy the function using the ",(0,t.jsx)(e.code,{children:"create"})," command."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"\n$ bin/pulsar-admin functions create \\\n  --py reverse.py \\\n  --classname reverse \\\n  --inputs persistent://public/default/backwards \\\n  --output persistent://public/default/forwards \\\n  --tenant public \\\n  --namespace default \\\n  --name reverse\n\n"})}),"\n",(0,t.jsxs)(e.p,{children:["If you see ",(0,t.jsx)(e.code,{children:"Created successfully"}),", the function is ready to accept incoming messages. Because the function is running in cluster mode, you can ",(0,t.jsx)(e.strong,{children:"trigger"})," the function using the ",(0,t.jsx)(e.a,{href:"/docs/2.4.0/reference-ulsar-admin#trigger",children:(0,t.jsx)(e.code,{children:"trigger"})})," command. This command sends a message that you specify to the function and returns the function output. The following is an example."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'\n$ bin/pulsar-admin functions trigger \\\n  --name reverse \\\n  --tenant public \\\n  --namespace default \\\n  --trigger-value "sdrawrof won si tub sdrawkcab saw gnirts sihT"\n\n'})}),"\n",(0,t.jsx)(e.p,{children:"You will get the following output."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"\nThis string was backwards but is now forwards\n\n"})}),"\n",(0,t.jsxs)(e.p,{children:["You have created a new Pulsar Function, deployed it in your Pulsar standalone cluster in ",(0,t.jsx)(e.a,{href:"#run-a-pulsar-function-in-cluster-mode",children:"cluster mode"}),", and triggered the Function."]}),"\n",(0,t.jsx)(e.h2,{id:"write-and-run-a-go-function",children:"Write and run a Go function"}),"\n",(0,t.jsxs)(e.p,{children:["Go function depends on ",(0,t.jsx)(e.code,{children:"pulsar-client-go"}),". Make sure that you have built ",(0,t.jsx)(e.code,{children:"pulsar-client-go"})," before using Go function."]}),"\n",(0,t.jsx)(e.p,{children:"To write and run a Go function, complete the following steps."}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:"Create a new Go file."}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"\ntouch helloFunc.go\n\n"})}),"\n",(0,t.jsxs)(e.ol,{start:"2",children:["\n",(0,t.jsxs)(e.li,{children:["Append a byte for messages from the input topic.\nThe following is a ",(0,t.jsx)(e.code,{children:"helloFunc.go"})," example. Each message from the input topic is appended with a ",(0,t.jsx)(e.code,{children:"110"})," byte, and then delivered to the output topic."]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:'\npackage main\n\nimport (\n\t"context"\n\n\t"github.com/apache/pulsar/pulsar-function-go/pf"\n)\n\nfunc HandleResponse(ctx context.Context, in []byte) ([]byte, error) {\n\tres := append(in, 110)\n\treturn res, nil\n}\n\nfunc main() {\n\tpf.Start(HandleResponse)\n}\n\n'})}),"\n",(0,t.jsxs)(e.ol,{start:"3",children:["\n",(0,t.jsx)(e.li,{children:"Compile code."}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"\ngo build -o examplepulsar helloFunc.go\n\n"})}),"\n",(0,t.jsxs)(e.ol,{start:"4",children:["\n",(0,t.jsx)(e.li,{children:"Run Go function."}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"\n$ bin/pulsar-admin functions create \\\n  --go examplepulsar \\\n  --inputs persistent://public/default/backwards \\\n  --output persistent://public/default/forwards \\\n  --tenant public \\\n  --namespace default \\\n  --name gofunc\n\n"})}),"\n",(0,t.jsxs)(e.p,{children:["If you see ",(0,t.jsx)(e.code,{children:"Created successfully"}),", the function is ready to accept incoming messages. Start a producer and produce messages to the ",(0,t.jsx)(e.code,{children:"backwards"})," input topic. Start a consumer and consume messages from the ",(0,t.jsx)(e.code,{children:"forwards"})," output topic, you will see ",(0,t.jsx)(e.code,{children:"110"})," is appended to all messages."]}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"--classname"})," parameter is not specified when running Go function, because there is no ",(0,t.jsx)(e.code,{children:"Class"})," concept in Go, which is different from Java and Python."]}),"\n",(0,t.jsx)(e.admonition,{type:"note",children:(0,t.jsxs)(e.p,{children:["When you use the ",(0,t.jsx)(e.code,{children:"--go"})," command to specify an executable file, make sure you have executable permissions."]})}),"\n",(0,t.jsx)(e.h2,{id:"package-python-dependencies",children:"Package Python dependencies"}),"\n",(0,t.jsx)(e.p,{children:"When you deploy Python functions in a cluster offline, you need to package the required dependencies in a ZIP file before deployment."}),"\n",(0,t.jsx)(e.h3,{id:"client-requirements",children:"Client requirements"}),"\n",(0,t.jsx)(e.p,{children:"The following programs are required to be installed on the client machine."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"\npip \\\\ required for getting python dependencies\nzip \\\\ for building zip archives\n\n"})}),"\n",(0,t.jsx)(e.h3,{id:"python-dependencies",children:"Python dependencies"}),"\n",(0,t.jsxs)(e.p,{children:["A file named ",(0,t.jsx)(e.strong,{children:"requirements.txt"})," is needed with required dependencies for the Python function."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"\nsh==1.12.14\n\n"})}),"\n",(0,t.jsxs)(e.p,{children:["Prepare the Pulsar Function in the ",(0,t.jsx)(e.strong,{children:"src"})," folder."]}),"\n",(0,t.jsxs)(e.p,{children:["Run the following command to gather Python dependencies in the ",(0,t.jsx)(e.strong,{children:"deps"})," folder."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"\npip download \\\n--only-binary :all: \\\n--platform manylinux1_x86_64 \\\n--python-version 27 \\\n--implementation cp \\\n--abi cp27m -r requirements.txt -d deps\n\n"})}),"\n",(0,t.jsx)(e.p,{children:"Sample output"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"\nCollecting sh==1.12.14 (from -r requirements.txt (line 1))\n  Using cached https://files.pythonhosted.org/packages/4a/22/17b22ef5b049f12080f5815c41bf94de3c229217609e469001a8f80c1b3d/sh-1.12.14-py2.py3-none-any.whl\n  Saved ./deps/sh-1.12.14-py2.py3-none-any.whl\nSuccessfully downloaded sh\n\n"})}),"\n",(0,t.jsx)(e.admonition,{type:"note",children:(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"pulsar-client"})," is not needed as a dependency as it has already installed in the worker node."]})}),"\n",(0,t.jsx)(e.h4,{id:"package",children:"Package"}),"\n",(0,t.jsxs)(e.p,{children:["Create a destination folder with the desired package name, for example, ",(0,t.jsx)(e.strong,{children:"exclamation"}),". Copy the ",(0,t.jsx)(e.strong,{children:"src"})," and ",(0,t.jsx)(e.strong,{children:"deps"})," folders into it, and compress the folder into a ZIP archive."]}),"\n",(0,t.jsx)(e.p,{children:"Sample sequence"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"\ncp -R deps exclamation/\ncp -R src exclamation/\n\nls -la exclamation/\ntotal 7\ndrwxr-xr-x   5 a.ahmed  staff  160 Nov  6 17:51 .\ndrwxr-xr-x  12 a.ahmed  staff  384 Nov  6 17:52 ..\ndrwxr-xr-x   3 a.ahmed  staff   96 Nov  6 17:51 deps\ndrwxr-xr-x   3 a.ahmed  staff   96 Nov  6 17:51 src\n\nzip -r exclamation.zip exclamation\n\n"})}),"\n",(0,t.jsxs)(e.p,{children:["After package all the required dependencies into the ",(0,t.jsx)(e.strong,{children:"exclamation.zip"})," file, you can deploy functions in a Pulsar worker. The Pulsar worker does not need internet connectivity to download packages, because they are all included in the ZIP file."]})]})}function d(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(u,{...n})}):u(n)}},28453:(n,e,s)=>{s.d(e,{R:()=>r,x:()=>l});var t=s(96540);const i={},a=t.createContext(i);function r(n){const e=t.useContext(a);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:r(n.components),t.createElement(a.Provider,{value:e},n.children)}}}]);