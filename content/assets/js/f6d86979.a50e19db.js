"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[34632],{15680:(e,a,n)=>{n.d(a,{xA:()=>i,yg:()=>d});var r=n(96540);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function s(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?s(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function c(e,a){if(null==e)return{};var n,r,t=function(e,a){if(null==e)return{};var n,r,t={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var l=r.createContext({}),m=function(e){var a=r.useContext(l),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},i=function(e){var a=m(e.components);return r.createElement(l.Provider,{value:a},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},g=r.forwardRef((function(e,a){var n=e.components,t=e.mdxType,s=e.originalType,l=e.parentName,i=c(e,["components","mdxType","originalType","parentName"]),u=m(n),g=t,d=u["".concat(l,".").concat(g)]||u[g]||p[g]||s;return n?r.createElement(d,o(o({ref:a},i),{},{components:n})):r.createElement(d,o({ref:a},i))}));function d(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var s=n.length,o=new Array(s);o[0]=g;var c={};for(var l in a)hasOwnProperty.call(a,l)&&(c[l]=a[l]);c.originalType=e,c[u]="string"==typeof e?e:t,o[1]=c;for(var m=2;m<s;m++)o[m]=n[m];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},19365:(e,a,n)=>{n.d(a,{A:()=>o});var r=n(96540),t=n(20053);const s={tabItem:"tabItem_Ymn6"};function o(e){let{children:a,hidden:n,className:o}=e;return r.createElement("div",{role:"tabpanel",className:(0,t.A)(s.tabItem,o),hidden:n},a)}},11470:(e,a,n)=>{n.d(a,{A:()=>S});var r=n(58168),t=n(96540),s=n(20053),o=n(23104),c=n(56347),l=n(57485),m=n(31682),i=n(89466);function u(e){return function(e){return t.Children.map(e,(e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:a}=e;return!!a&&"object"==typeof a&&"value"in a}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:a,label:n,attributes:r,default:t}}=e;return{value:a,label:n,attributes:r,default:t}}))}function p(e){const{values:a,children:n}=e;return(0,t.useMemo)((()=>{const e=a??u(n);return function(e){const a=(0,m.X)(e,((e,a)=>e.value===a.value));if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[a,n])}function g(e){let{value:a,tabValues:n}=e;return n.some((e=>e.value===a))}function d(e){let{queryString:a=!1,groupId:n}=e;const r=(0,c.W6)(),s=function(e){let{queryString:a=!1,groupId:n}=e;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:a,groupId:n});return[(0,l.aZ)(s),(0,t.useCallback)((e=>{if(!s)return;const a=new URLSearchParams(r.location.search);a.set(s,e),r.replace({...r.location,search:a.toString()})}),[s,r])]}function y(e){const{defaultValue:a,queryString:n=!1,groupId:r}=e,s=p(e),[o,c]=(0,t.useState)((()=>function(e){let{defaultValue:a,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!g({value:a,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${a}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return a}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:a,tabValues:s}))),[l,m]=d({queryString:n,groupId:r}),[u,y]=function(e){let{groupId:a}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(a),[r,s]=(0,i.Dv)(n);return[r,(0,t.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:r}),h=(()=>{const e=l??u;return g({value:e,tabValues:s})?e:null})();(0,t.useLayoutEffect)((()=>{h&&c(h)}),[h]);return{selectedValue:o,selectValue:(0,t.useCallback)((e=>{if(!g({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);c(e),m(e),y(e)}),[m,y,s]),tabValues:s}}var h=n(92303);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function N(e){let{className:a,block:n,selectedValue:c,selectValue:l,tabValues:m}=e;const i=[],{blockElementScrollPositionUntilNextRender:u}=(0,o.a_)(),p=e=>{const a=e.currentTarget,n=i.indexOf(a),r=m[n].value;r!==c&&(u(a),l(r))},g=e=>{let a=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=i.indexOf(e.currentTarget)+1;a=i[n]??i[0];break}case"ArrowLeft":{const n=i.indexOf(e.currentTarget)-1;a=i[n]??i[i.length-1];break}}a?.focus()};return t.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},a)},m.map((e=>{let{value:a,label:n,attributes:o}=e;return t.createElement("li",(0,r.A)({role:"tab",tabIndex:c===a?0:-1,"aria-selected":c===a,key:a,ref:e=>i.push(e),onKeyDown:g,onClick:p},o,{className:(0,s.A)("tabs__item",v.tabItem,o?.className,{"tabs__item--active":c===a})}),n??a)})))}function f(e){let{lazy:a,children:n,selectedValue:r}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(a){const e=s.find((e=>e.props.value===r));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return t.createElement("div",{className:"margin-top--md"},s.map(((e,a)=>(0,t.cloneElement)(e,{key:a,hidden:e.props.value!==r}))))}function b(e){const a=y(e);return t.createElement("div",{className:(0,s.A)("tabs-container",v.tabList)},t.createElement(N,(0,r.A)({},e,a)),t.createElement(f,(0,r.A)({},e,a)))}function S(e){const a=(0,h.A)();return t.createElement(b,(0,r.A)({key:String(a)},e))}},11306:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>c,metadata:()=>m,toc:()=>u});var r=n(58168),t=(n(96540),n(15680)),s=n(11470),o=n(19365);const c={id:"schema-get-started",title:"Get started",sidebar_label:"Get started",description:"Get started to construct Pulsar schemas and customize Pulsar schema storage."},l=void 0,m={unversionedId:"schema-get-started",id:"version-4.0.x/schema-get-started",title:"Get started",description:"Get started to construct Pulsar schemas and customize Pulsar schema storage.",source:"@site/versioned_docs/version-4.0.x/schema-get-started.md",sourceDirName:".",slug:"/schema-get-started",permalink:"/docs/4.0.x/schema-get-started",draft:!1,editUrl:"https://github.com/apache/pulsar-site/edit/main/versioned_docs/version-4.0.x/schema-get-started.md",tags:[],version:"4.0.x",frontMatter:{id:"schema-get-started",title:"Get started",sidebar_label:"Get started",description:"Get started to construct Pulsar schemas and customize Pulsar schema storage."},sidebar:"docsSidebar",previous:{title:"Understand schema",permalink:"/docs/4.0.x/schema-understand"},next:{title:"Overview",permalink:"/docs/4.0.x/functions-overview"}},i={},u=[{value:"Construct a schema",id:"construct-a-schema",level:2},{value:"bytes",id:"bytes",level:3},{value:"string",id:"string",level:3},{value:"key/value",id:"keyvalue",level:3},{value:"Avro",id:"avro",level:3},{value:"JSON",id:"json",level:3},{value:"ProtobufNative",id:"protobufnative",level:3},{value:"Protobuf",id:"protobuf",level:3},{value:"Native Avro",id:"native-avro",level:3},{value:"AUTO_PRODUCE",id:"auto_produce",level:3},{value:"AUTO_CONSUME",id:"auto_consume",level:3},{value:"Customize schema storage",id:"customize-schema-storage",level:2},{value:"Implement <code>SchemaStorage</code> interface",id:"implement-schemastorage-interface",level:3},{value:"Implement <code>SchemaStorageFactory</code> interface",id:"implement-schemastoragefactory-interface",level:3},{value:"Deploy custom schema storage",id:"deploy-custom-schema-storage",level:3}],p={toc:u},g="wrapper";function d(e){let{components:a,...n}=e;return(0,t.yg)(g,(0,r.A)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,t.yg)("p",null,"This hands-on tutorial provides instructions and examples on how to construct schemas. For instructions on administrative tasks, see ",(0,t.yg)("a",{parentName:"p",href:"/docs/4.0.x/admin-api-schemas"},"Manage schema"),"."),(0,t.yg)("h2",{id:"construct-a-schema"},"Construct a schema"),(0,t.yg)("h3",{id:"bytes"},"bytes"),(0,t.yg)("p",null,"This example demonstrates how to construct a ",(0,t.yg)("a",{parentName:"p",href:"/docs/4.0.x/schema-understand#primitive-type"},"bytes schema")," using language-specific clients and use it to produce and consume messages."),(0,t.yg)(s.A,{groupId:"api-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"C++",value:"C++"},{label:"Python",value:"Python"},{label:"Go",value:"Go"}],mdxType:"Tabs"},(0,t.yg)(o.A,{value:"Java",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},'Producer<byte[]> producer = pulsarClient.newProducer(Schema.BYTES)\n       .topic("my-topic")\n       .create();\nConsumer<byte[]> consumer = pulsarClient.newConsumer(Schema.BYTES)\n       .topic("my-topic")\n       .subscriptionName("my-sub")\n       .subscribe();\n\nproducer.newMessage().value("message".getBytes()).send();\n\nMessage<byte[]> message = consumer.receive(5, TimeUnit.SECONDS);\n'))),(0,t.yg)(o.A,{value:"C++",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},'SchemaInfo schemaInfo = SchemaInfo(SchemaType::BYTES, "Bytes", "");\nProducer producer;\nclient.createProducer("topic-bytes", ProducerConfiguration().setSchema(schemaInfo), producer);\nstd::array<char, 1024> buffer;\nproducer.send(MessageBuilder().setContent(buffer.data(), buffer.size()).build());\nConsumer consumer;\nres = client.subscribe("topic-bytes", "my-sub", ConsumerConfiguration().setSchema(schemaInfo), consumer);\nMessage msg;\nconsumer.receive(msg, 3000);\n'))),(0,t.yg)(o.A,{value:"Python",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"producer = client.create_producer(\n   'bytes-schema-topic',\n   schema=BytesSchema())\nproducer.send(b\"Hello\")\n\nconsumer = client.subscribe(\n   'bytes-schema-topic',\n    'sub',\n    schema=BytesSchema())\nmsg = consumer.receive()\ndata = msg.value()\n"))),(0,t.yg)(o.A,{value:"Go",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-go"},'producer, err := client.CreateProducer(pulsar.ProducerOptions{\n    Topic:  "my-topic",\n    Schema: pulsar.NewBytesSchema(nil),\n})\nid, err := producer.Send(context.Background(), &pulsar.ProducerMessage{\n    Value: []byte("message"),\n})\n\nconsumer, err := client.Subscribe(pulsar.ConsumerOptions{\n    Topic:            "my-topic",\n    Schema:           pulsar.NewBytesSchema(nil),\n    SubscriptionName: "my-sub",\n    Type:             pulsar.Exclusive,\n})\n')))),(0,t.yg)("h3",{id:"string"},"string"),(0,t.yg)("p",null,"This example demonstrates how to construct a ",(0,t.yg)("a",{parentName:"p",href:"/docs/4.0.x/schema-understand#primitive-type"},"string schema")," using language-specific clients and use it to produce and consume messages."),(0,t.yg)(s.A,{groupId:"api-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"C++",value:"C++"},{label:"Python",value:"Python"},{label:"Go",value:"Go"}],mdxType:"Tabs"},(0,t.yg)(o.A,{value:"Java",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},'Producer<String> producer = client.newProducer(Schema.STRING).create();\nproducer.newMessage().value("Hello Pulsar!").send();\n\nConsumer<String> consumer = client.newConsumer(Schema.STRING).subscribe();\nMessage<String> message = consumer.receive();\n'))),(0,t.yg)(o.A,{value:"C++",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},'SchemaInfo schemaInfo = SchemaInfo(SchemaType::STRING, "String", "");\nProducer producer;\nclient.createProducer("topic-string", ProducerConfiguration().setSchema(schemaInfo), producer);\nproducer.send(MessageBuilder().setContent("message").build());\n\nConsumer consumer;\nclient.subscribe("topic-string", "my-sub", ConsumerConfiguration().setSchema(schemaInfo), consumer);\nMessage msg;\nconsumer.receive(msg, 3000);\n'))),(0,t.yg)(o.A,{value:"Python",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"producer = client.create_producer(\n      'string-schema-topic',\n      schema=StringSchema())\nproducer.send(\"Hello\")\n\nconsumer = client.subscribe(\n        'string-schema-topic',\n        'sub',\n        schema=StringSchema())\nmsg = consumer.receive()\nstr = msg.value()\n"))),(0,t.yg)(o.A,{value:"Go",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-go"},'producer, err := client.CreateProducer(pulsar.ProducerOptions{\n    Topic:  "my-topic",\n    Schema: pulsar.NewStringSchema(nil),\n})\nid, err := producer.Send(context.Background(), &pulsar.ProducerMessage{\n    Value: "message",\n})\n\nconsumer, err := client.Subscribe(pulsar.ConsumerOptions{\n    Topic:            "my-topic",\n    Schema:           pulsar.NewStringSchema(nil),\n    SubscriptionName: "my-sub",\n    Type:             pulsar.Exclusive,\n})\nmsg, err := consumer.Receive(context.Background())\n')))),(0,t.yg)("h3",{id:"keyvalue"},"key/value"),(0,t.yg)("p",null,"This example shows how to construct a ",(0,t.yg)("a",{parentName:"p",href:"/docs/4.0.x/schema-understand#keyvalue-schema"},"key/value schema")," using language-specific clients and use it to produce and consume messages."),(0,t.yg)(s.A,{groupId:"api-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"C++",value:"C++"}],mdxType:"Tabs"},(0,t.yg)(o.A,{value:"Java",mdxType:"TabItem"},(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},"Construct a key/value schema with ",(0,t.yg)("inlineCode",{parentName:"p"},"INLINE")," encoding type."),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-java"},"Schema<KeyValue<Integer, String>> kvSchema = Schema.KeyValue(\n    Schema.INT32,\n    Schema.STRING,\n    KeyValueEncodingType.INLINE\n);\n")),(0,t.yg)("p",{parentName:"li"},"Alternatively, construct a key/value schema with ",(0,t.yg)("inlineCode",{parentName:"p"},"SEPARATED")," encoding type."),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-java"},"Schema<KeyValue<Integer, String>> kvSchema = Schema.KeyValue(\n    Schema.INT32,\n    Schema.STRING,\n    KeyValueEncodingType.SEPARATED\n);\n"))),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},"Produce messages using a key/value schema."),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-java"},'Producer<KeyValue<Integer, String>> producer = client.newProducer(kvSchema)\n    .topic(topicName)\n    .create();\n\nfinal int key = 100;\nfinal String value = "value-100";\n\n// send the key/value message\nproducer.newMessage()\n    .value(new KeyValue(key, value))\n    .send();\n'))),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},"Consume messages using a key/value schema."),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-java"},"Consumer<KeyValue<Integer, String>> consumer = client.newConsumer(kvSchema)\n    ...\n    .topic(topicName)\n    .subscriptionName(subscriptionName).subscribe();\n\n// receive key/value pair\nMessage<KeyValue<Integer, String>> msg = consumer.receive();\nKeyValue<Integer, String> kv = msg.getValue();\n"))))),(0,t.yg)(o.A,{value:"C++",mdxType:"TabItem"},(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},"Construct a key/value schema with ",(0,t.yg)("inlineCode",{parentName:"p"},"INLINE")," encoding type."),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},'//Prepare keyValue schema\nstd::string jsonSchema =\nR"({"type":"record","name":"cpx","fields":[{"name":"re","type":"double"},{"name":"im","type":"double"}]})";\nSchemaInfo keySchema(JSON, "key-json", jsonSchema);\nSchemaInfo valueSchema(JSON, "value-json", jsonSchema);\nSchemaInfo keyValueSchema(keySchema, valueSchema, KeyValueEncodingType::INLINE);\n'))),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},"Produce messages using a key/value schema."),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},'//Create Producer\nProducer producer;\nclient.createProducer("my-topic", ProducerConfiguration().setSchema(keyValueSchema), producer);\n\n//Prepare message\nstd::string jsonData = "{\\"re\\":2.1,\\"im\\":1.23}";\nKeyValue keyValue(std::move(jsonData), std::move(jsonData));\nMessage msg = MessageBuilder().setContent(keyValue).setProperty("x", "1").build();\n//Send message\nproducer.send(msg);\n'))),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},"Consume messages using a key/value schema."),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},'//Create Consumer\nConsumer consumer;\nclient.subscribe("my-topic", "my-sub", ConsumerConfiguration().setSchema(keyValueSchema), consumer);\n\n//Receive message\nMessage message;\nconsumer.receive(message);\n')))))),(0,t.yg)("h3",{id:"avro"},"Avro"),(0,t.yg)(s.A,{groupId:"api-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"C++",value:"C++"},{label:"Python",value:"Python"},{label:"Go",value:"Go"}],mdxType:"Tabs"},(0,t.yg)(o.A,{value:"Java",mdxType:"TabItem"},(0,t.yg)("p",null,"Suppose you have a ",(0,t.yg)("inlineCode",{parentName:"p"},"SensorReading")," class as follows, and you'd like to transmit it over a Pulsar topic."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},"public class SensorReading {\n    public float temperature;\n\n    public SensorReading(float temperature) {\n        this.temperature = temperature;\n    }\n\n    // A no-arg constructor is required\n    public SensorReading() {\n    }\n\n    public float getTemperature() {\n        return temperature;\n    }\n\n    public void setTemperature(float temperature) {\n        this.temperature = temperature;\n    }\n}\n")),(0,t.yg)("p",null,"Create a ",(0,t.yg)("inlineCode",{parentName:"p"},"Producer<SensorReading>")," (or ",(0,t.yg)("inlineCode",{parentName:"p"},"Consumer<SensorReading>"),") like this:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},'Producer<SensorReading> producer = client.newProducer(AvroSchema.of(SensorReading.class))\n        .topic("sensor-readings")\n        .create();\n'))),(0,t.yg)(o.A,{value:"C++",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},'// Send messages\nstatic const std::string exampleSchema =\n    "{\\"type\\":\\"record\\",\\"name\\":\\"Example\\",\\"namespace\\":\\"test\\","\n    "\\"fields\\":[{\\"name\\":\\"a\\",\\"type\\":\\"int\\"},{\\"name\\":\\"b\\",\\"type\\":\\"int\\"}]}";\nProducer producer;\nProducerConfiguration producerConf;\nproducerConf.setSchema(SchemaInfo(AVRO, "Avro", exampleSchema));\nclient.createProducer("topic-avro", producerConf, producer);\n\n// Receive messages\nstatic const std::string exampleSchema =\n    "{\\"type\\":\\"record\\",\\"name\\":\\"Example\\",\\"namespace\\":\\"test\\","\n    "\\"fields\\":[{\\"name\\":\\"a\\",\\"type\\":\\"int\\"},{\\"name\\":\\"b\\",\\"type\\":\\"int\\"}]}";\nConsumerConfiguration consumerConf;\nConsumer consumer;\nconsumerConf.setSchema(SchemaInfo(AVRO, "Avro", exampleSchema));\nclient.subscribe("topic-avro", "sub-2", consumerConf, consumer)\n'))),(0,t.yg)(o.A,{value:"Python",mdxType:"TabItem"},(0,t.yg)("p",null,"You can declare an ",(0,t.yg)("inlineCode",{parentName:"p"},"AvroSchema")," using Python through one of the following methods."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Method 1: Record")),(0,t.yg)("p",null,"Declare an ",(0,t.yg)("inlineCode",{parentName:"p"},"AvroSchema")," by passing a class that inherits from ",(0,t.yg)("inlineCode",{parentName:"p"},"pulsar.schema.Record")," and defines the fields as class variables."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"class Example(Record):\n    a = Integer()\n    b = Integer()\n\nproducer = client.create_producer(\n   'avro-schema-topic',\n   schema=AvroSchema(Example))\nr = Example(a=1, b=2)\nproducer.send(r)\n\nconsumer = client.subscribe(\n   'avro-schema-topic',\n    'sub',\n    schema=AvroSchema(Example))\nmsg = consumer.receive()\ne = msg.value()\n")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Method 2: JSON definition")),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},"Declare an ",(0,t.yg)("inlineCode",{parentName:"p"},"AvroSchema")," using JSON. In this case, Avro schemas are defined using JSON."),(0,t.yg)("p",{parentName:"li"},"Below is an example of ",(0,t.yg)("inlineCode",{parentName:"p"},"AvroSchema")," defined using a JSON file (",(0,t.yg)("inlineCode",{parentName:"p"},"company.avsc"),")."),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-json"},'{\n    "doc": "this is doc",\n    "namespace": "example.avro",\n    "type": "record",\n    "name": "Company",\n    "fields": [\n        {"name": "name", "type": ["null", "string"]},\n        {"name": "address", "type": ["null", "string"]},\n        {"name": "employees", "type": ["null", {"type": "array", "items": {\n            "type": "record",\n            "name": "Employee",\n            "fields": [\n                {"name": "name", "type": ["null", "string"]},\n                {"name": "age", "type": ["null", "int"]}\n            ]\n        }}]},\n        {"name": "labels", "type": ["null", {"type": "map", "values": "string"}]}\n    ]\n}\n'))),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},"Load a schema definition from a file by using ",(0,t.yg)("a",{parentName:"p",href:"https://avro.apache.org/docs/current/getting-started-python/"},(0,t.yg)("inlineCode",{parentName:"a"},"avro.schema"))," or ",(0,t.yg)("a",{parentName:"p",href:"https://fastavro.readthedocs.io/en/latest/schema.html#fastavro._schema_py.load_schema"},(0,t.yg)("inlineCode",{parentName:"a"},"fastavro.schema")),"."),(0,t.yg)("p",{parentName:"li"},"If you use the ",(0,t.yg)("a",{parentName:"p",href:"#method-2-json-definition"},"JSON definition")," method to declare an ",(0,t.yg)("inlineCode",{parentName:"p"},"AvroSchema"),", you need to:"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Use ",(0,t.yg)("a",{parentName:"li",href:"https://developers.google.com/edu/python/dict-files"},"Python dict")," to produce and consume messages, which is different from using the ",(0,t.yg)("a",{parentName:"li",href:"#method-1-record"},"Record")," method."),(0,t.yg)("li",{parentName:"ul"},"Set the value of the ",(0,t.yg)("inlineCode",{parentName:"li"},"_record_cls")," parameter to ",(0,t.yg)("inlineCode",{parentName:"li"},"None")," when generating an ",(0,t.yg)("inlineCode",{parentName:"li"},"AvroSchema")," object.")),(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Example")),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-python"},'from fastavro.schema import load_schema\nfrom pulsar.schema import *\nschema_definition = load_schema("examples/company.avsc")\navro_schema = AvroSchema(None, schema_definition=schema_definition)\nproducer = client.create_producer(\n    topic=topic,\n    schema=avro_schema)\nconsumer = client.subscribe(topic, \'test\', schema=avro_schema)\ncompany = {\n    "name": "company-name" + str(i),\n    "address": \'xxx road xxx street \' + str(i),\n    "employees": [\n        {"name": "user" + str(i), "age": 20 + i},\n        {"name": "user" + str(i), "age": 30 + i},\n        {"name": "user" + str(i), "age": 35 + i},\n    ],\n    "labels": {\n        "industry": "software" + str(i),\n        "scale": ">100",\n        "funds": "1000000.0"\n    }\n}\nproducer.send(company)\nmsg = consumer.receive()\n# Users could get a dict object by `value()` method.\nmsg.value()\n'))))),(0,t.yg)(o.A,{value:"Go",mdxType:"TabItem"},(0,t.yg)("p",null,"Suppose you have an ",(0,t.yg)("inlineCode",{parentName:"p"},"avroExampleStruct")," class as follows, and you'd like to transmit it over a Pulsar topic."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-go"},"type avroExampleStruct struct {\n    ID   int\n    Name string\n}\n")),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},"Add an ",(0,t.yg)("inlineCode",{parentName:"p"},"avroSchemaDef")," like this:"),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-go"},'var (\n    exampleSchemaDef = "{\\"type\\":\\"record\\",\\"name\\":\\"Example\\",\\"namespace\\":\\"test\\"," +\n  "\\"fields\\":[{\\"name\\":\\"ID\\",\\"type\\":\\"int\\"},{\\"name\\":\\"Name\\",\\"type\\":\\"string\\"}]}"\n)\n'))),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},"Create producer and consumer to send/receive messages:"),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-go"},'//Create producer and send message\nproducer, err := client.CreateProducer(pulsar.ProducerOptions{\n    Topic:  "my-topic",\n    Schema: pulsar.NewAvroSchema(exampleSchemaDef, nil),\n})\n\nmsgId, err := producer.Send(context.Background(), &pulsar.ProducerMessage{\n    Value: avroExampleStruct{\n       ID:   10,\n       Name: "avroExampleStruct",\n  },\n})\n\n//Create Consumer and receive message\nconsumer, err := client.Subscribe(pulsar.ConsumerOptions{\n    Topic:            "my-topic",\n    Schema:           pulsar.NewAvroSchema(exampleSchemaDef, nil),\n    SubscriptionName: "my-sub",\n    Type:             pulsar.Shared,\n})\nmessage, err := consumer.Receive(context.Background())\n')))))),(0,t.yg)("h3",{id:"json"},"JSON"),(0,t.yg)(s.A,{groupId:"api-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"C++",value:"C++"},{label:"Python",value:"Python"},{label:"Go",value:"Go"}],mdxType:"Tabs"},(0,t.yg)(o.A,{value:"Java",mdxType:"TabItem"},(0,t.yg)("p",null,"Similar to using ",(0,t.yg)("inlineCode",{parentName:"p"},"AvroSchema"),", you can declare a ",(0,t.yg)("inlineCode",{parentName:"p"},"JsonSchema")," by passing a class. The only difference is to use  ",(0,t.yg)("inlineCode",{parentName:"p"},"JsonSchema")," instead of ",(0,t.yg)("inlineCode",{parentName:"p"},"AvroSchema")," when defining the schema type, as shown below. For how to use ",(0,t.yg)("inlineCode",{parentName:"p"},"AvroSchema")," via record, see ",(0,t.yg)("a",{parentName:"p",href:"#method-1-record"},"Method 1 - Record"),"."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},'static class SchemaDemo {\n   public String name;\n   public int age;\n}\n\nProducer<SchemaDemo> producer = pulsarClient.newProducer(Schema.JSON(SchemaDemo.class))\n       .topic("my-topic")\n       .create();\nConsumer<SchemaDemo> consumer = pulsarClient.newConsumer(Schema.JSON(SchemaDemo.class))\n       .topic("my-topic")\n       .subscriptionName("my-sub")\n       .subscribe();\n\nSchemaDemo schemaDemo = new SchemaDemo();\nschemaDemo.name = "puslar";\nschemaDemo.age = 20;\nproducer.newMessage().value(schemaDemo).send();\n\nMessage<SchemaDemo> message = consumer.receive(5, TimeUnit.SECONDS);\n'))),(0,t.yg)(o.A,{value:"C++",mdxType:"TabItem"},(0,t.yg)("p",null,"To declare a ",(0,t.yg)("inlineCode",{parentName:"p"},"JSON")," schema using C++, do the following:"),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},"Pass a JSON string like this:"),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},'Std::string jsonSchema = R"({"type":"record","name":"cpx","fields":[{"name":"re","type":"double"},{"name":"im","type":"double"}]})";\nSchemaInfo schemaInfo = SchemaInfo(JSON, "JSON", jsonSchema);\n'))),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},"Create a producer and use it to send messages."),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},'client.createProducer("my-topic", ProducerConfiguration().setSchema(schemaInfo), producer);\nstd::string jsonData = "{\\"re\\":2.1,\\"im\\":1.23}";\nproducer.send(MessageBuilder().setContent(std::move(jsonData)).build());\n'))),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},"Create consumer and receive message."),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},'Consumer consumer;\nclient.subscribe("my-topic", "my-sub", ConsumerConfiguration().setSchema(schemaInfo), consumer);\nMessage msg;\nconsumer.receive(msg);\n'))))),(0,t.yg)(o.A,{value:"Python",mdxType:"TabItem"},(0,t.yg)("p",null,"You can declare a ",(0,t.yg)("inlineCode",{parentName:"p"},"JsonSchema")," by passing a class that inherits from ",(0,t.yg)("inlineCode",{parentName:"p"},"pulsar.schema.Record")," and defines the fields as class variables. This is similar to using ",(0,t.yg)("inlineCode",{parentName:"p"},"AvroSchema"),". The only difference is to use  ",(0,t.yg)("inlineCode",{parentName:"p"},"JsonSchema")," instead of ",(0,t.yg)("inlineCode",{parentName:"p"},"AvroSchema")," when defining schema type, as shown below. For how to use ",(0,t.yg)("inlineCode",{parentName:"p"},"AvroSchema")," via record, see [#method-1-record)."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"producer = client.create_producer(\n   'avro-schema-topic',\n   schema=JsonSchema(Example))\n\nconsumer = client.subscribe(\n    'avro-schema-topic',\n    'sub',\n    schema=JsonSchema(Example))\n"))),(0,t.yg)(o.A,{value:"Go",mdxType:"TabItem"},(0,t.yg)("p",null,"Suppose you have an ",(0,t.yg)("inlineCode",{parentName:"p"},"avroExampleStruct")," class as follows, and you'd like to transmit it as JSON form over a Pulsar topic."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-go"},'type jsonExampleStruct struct {\n    ID   int    `json:"id"`\n    Name string `json:"name"`\n}\n')),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},"Add a ",(0,t.yg)("inlineCode",{parentName:"p"},"jsonSchemaDef")," like this:"),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-go"},'jsonSchemaDef = "{\\"type\\":\\"record\\",\\"name\\":\\"Example\\",\\"namespace\\":\\"test\\"," +\n"\\"fields\\":[{\\"name\\":\\"ID\\",\\"type\\":\\"int\\"},{\\"name\\":\\"Name\\",\\"type\\":\\"string\\"}]}"\n'))),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},"Create a producer/consumer to send/receive messages:"),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-go"},'//Create producer and send message\nproducer, err := client.CreateProducer(pulsar.ProducerOptions{\n    Topic:  "my-topic",\n    Schema: pulsar.NewJSONSchema(jsonSchemaDef, nil),\n})\n\nmsgId, err := producer.Send(context.Background(), &pulsar.ProducerMessage{\n    Value: jsonExampleStruct{\n        ID:   10,\n        Name: "jsonExampleStruct",\n  },\n})\n\n//Create Consumer and receive message\nconsumer, err := client.Subscribe(pulsar.ConsumerOptions{\n    Topic:            "my-topic",\n    Schema:           pulsar.NewJSONSchema(jsonSchemaDef, nil),\n    SubscriptionName: "my-sub",\n    Type:             pulsar.Exclusive,\n})\nmessage, err := consumer.Receive(context.Background())\n')))))),(0,t.yg)("h3",{id:"protobufnative"},"ProtobufNative"),(0,t.yg)(s.A,{groupId:"api-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"C++",value:"C++"}],mdxType:"Tabs"},(0,t.yg)(o.A,{value:"Java",mdxType:"TabItem"},(0,t.yg)("p",null,"The following example shows how to create a producer/consumer with a ProtobufNative schema using Java."),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},"Generate the ",(0,t.yg)("inlineCode",{parentName:"p"},"DemoMessage")," class using Protobuf3 or later versions."),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-protobuf"},'syntax = "proto3";\nmessage DemoMessage {\n   string stringField = 1;\n   double doubleField = 2;\n   int32 intField = 6;\n   TestEnum testEnum = 4;\n   SubMessage nestedField = 5;\n   repeated string repeatedField = 10;\n   proto.external.ExternalMessage externalMessage = 11;\n}\n'))),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},"Create a producer/consumer to send/receive messages."),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-java"},'Producer<DemoMessage> producer = pulsarClient.newProducer(Schema.PROTOBUF_NATIVE(DemoMessage.class))\n    .topic("my-topic")\n    .create();\nConsumer<DemoMessage> consumer = pulsarClient.newConsumer(Schema.PROTOBUF_NATIVE(DemoMessage.class))\n    .topic("my-topic")\n    .subscriptionName("my-sub")\n    .subscribe();\n\nSchemaDemo schemaDemo = new SchemaDemo();\nschemaDemo.name = "puslar";\nschemaDemo.age = 20;\nproducer.newMessage().value(DemoMessage.newBuilder().setStringField("string-field-value")\n    .setIntField(1).build()).send();\n\nMessage<DemoMessage> message = consumer.receive(5, TimeUnit.SECONDS);\n'))))),(0,t.yg)(o.A,{value:"C++",mdxType:"TabItem"},(0,t.yg)("p",null,"The following example shows how to create a producer/consumer with a ProtobufNative schema."),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},"Generate the ",(0,t.yg)("inlineCode",{parentName:"p"},"User")," class using Protobuf3 or later versions."),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-protobuf"},'syntax = "proto3";\n\nmessage User {\n    string name = 1;\n    int32 age = 2;\n}\n'))),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},"Include the ",(0,t.yg)("inlineCode",{parentName:"p"},"ProtobufNativeSchema.h")," in your source code. Ensure the Protobuf dependency has been added to your project."),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},"#include <pulsar/ProtobufNativeSchema.h>\n"))),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},"Create a producer to send a ",(0,t.yg)("inlineCode",{parentName:"p"},"User")," instance."),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},'ProducerConfiguration producerConf;\nproducerConf.setSchema(createProtobufNativeSchema(User::GetDescriptor()));\nProducer producer;\nclient.createProducer("topic-protobuf", producerConf, producer);\nUser user;\nuser.set_name("my-name");\nuser.set_age(10);\nstd::string content;\nuser.SerializeToString(&content);\nproducer.send(MessageBuilder().setContent(content).build());\n'))),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},"Create a consumer to receive a ",(0,t.yg)("inlineCode",{parentName:"p"},"User")," instance."),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},'ConsumerConfiguration consumerConf;\nconsumerConf.setSchema(createProtobufNativeSchema(User::GetDescriptor()));\nconsumerConf.setSubscriptionInitialPosition(InitialPositionEarliest);\nConsumer consumer;\nclient.subscribe("topic-protobuf", "my-sub", consumerConf, consumer);\nMessage msg;\nconsumer.receive(msg);\nUser user2;\nuser2.ParseFromArray(msg.getData(), msg.getLength());\n')))))),(0,t.yg)("h3",{id:"protobuf"},"Protobuf"),(0,t.yg)(s.A,{groupId:"api-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"C++",value:"C++"},{label:"Go",value:"Go"}],mdxType:"Tabs"},(0,t.yg)(o.A,{value:"Java",mdxType:"TabItem"},(0,t.yg)("p",null,"Constructing a protobuf schema using Java is similar to constructing a ",(0,t.yg)("inlineCode",{parentName:"p"},"ProtobufNative")," schema. The only difference is to use ",(0,t.yg)("inlineCode",{parentName:"p"},"PROTOBUF")," instead of ",(0,t.yg)("inlineCode",{parentName:"p"},"PROTOBUF_NATIVE")," when defining schema type as shown below."),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},"Generate the ",(0,t.yg)("inlineCode",{parentName:"p"},"DemoMessage")," class using Protobuf3 or later versions."),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-protobuf"},'syntax = "proto3";\nmessage DemoMessage {\n   string stringField = 1;\n   double doubleField = 2;\n   int32 intField = 6;\n   TestEnum testEnum = 4;\n   SubMessage nestedField = 5;\n   repeated string repeatedField = 10;\n   proto.external.ExternalMessage externalMessage = 11;\n}\n'))),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},"Create a producer/consumer to send/receive messages."),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-java"},'Producer<DemoMessage> producer = pulsarClient.newProducer(Schema.PROTOBUF(DemoMessage.class))\n       .topic("my-topic")\n       .create();\nConsumer<DemoMessage> consumer = pulsarClient.newConsumer(Schema.PROTOBUF(DemoMessage.class))\n       .topic("my-topic")\n       .subscriptionName("my-sub")\n       .subscribe();\n\nSchemaDemo schemaDemo = new SchemaDemo();\nschemaDemo.name = "puslar";\nschemaDemo.age = 20;\nproducer.newMessage().value(DemoMessage.newBuilder().setStringField("string-field-value")\n    .setIntField(1).build()).send();\n\nMessage<DemoMessage> message = consumer.receive(5, TimeUnit.SECONDS);\n'))))),(0,t.yg)(o.A,{value:"C++",mdxType:"TabItem"},(0,t.yg)("p",null,"Constructing a protobuf schema using C++ is similar to that using ",(0,t.yg)("inlineCode",{parentName:"p"},"JSON"),". The only difference is to use ",(0,t.yg)("inlineCode",{parentName:"p"},"PROTOBUF")," instead of ",(0,t.yg)("inlineCode",{parentName:"p"},"JSON")," when defining the schema type as shown below."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},'std::string jsonSchema =\n   R"({"type":"record","name":"cpx","fields":[{"name":"re","type":"double"},{"name":"im","type":"double"}]})";\nSchemaInfo schemaInfo = SchemaInfo(pulsar::PROTOBUF, "PROTOBUF", jsonSchema);\n')),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},"Create a producer to send messages."),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},'Producer producer;\nclient.createProducer("my-topic", ProducerConfiguration().setSchema(schemaInfo), producer);\nstd::string jsonData = "{\\"re\\":2.1,\\"im\\":1.23}";\nproducer.send(MessageBuilder().setContent(std::move(jsonData)).build());\n'))),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},"Create a consumer to receive messages."),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},'Consumer consumer;\nclient.subscribe("my-topic", "my-sub", ConsumerConfiguration().setSchema(schemaInfo),   consumer);\nMessage msg;\nconsumer.receive(msg);\n'))))),(0,t.yg)(o.A,{value:"Go",mdxType:"TabItem"},(0,t.yg)("p",null,"Suppose you have a ",(0,t.yg)("inlineCode",{parentName:"p"},"protobufDemo")," class as follows, and you'd like to transmit it in JSON form over a Pulsar topic."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-go"},'type protobufDemo struct {\n    Num                  int32    `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`\n    Msf                  string   `protobuf:"bytes,2,opt,name=msf,proto3" json:"msf,omitempty"`\n    XXX_NoUnkeyedLiteral struct{} `json:"-"`\n    XXX_unrecognized     []byte   `json:"-"`\n    XXX_sizecache        int32    `json:"-"`\n}\n')),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},"Add a ",(0,t.yg)("inlineCode",{parentName:"p"},"protoSchemaDef")," like this:"),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-go"},'var (\n    protoSchemaDef = "{\\"type\\":\\"record\\",\\"name\\":\\"Example\\",\\"namespace\\":\\"test\\"," +\n        "\\"fields\\":[{\\"name\\":\\"num\\",\\"type\\":\\"int\\"},{\\"name\\":\\"msf\\",\\"type\\":\\"string\\"}]}"\n)\n'))),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},"Create a producer/consumer to send/receive messages:"),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-go"},'psProducer := pulsar.NewProtoSchema(protoSchemaDef, nil)\nproducer, err := client.CreateProducer(pulsar.ProducerOptions{\n    Topic:  "proto",\n    Schema: psProducer,\n})\nmsgId, err := producer.Send(context.Background(), &pulsar.ProducerMessage{\n    Value: &protobufDemo{\n        Num: 100,\n        Msf: "pulsar",\n  },\n})\npsConsumer := pulsar.NewProtoSchema(protoSchemaDef, nil)\nconsumer, err := client.Subscribe(pulsar.ConsumerOptions{\n    Topic:                       "proto",\n    SubscriptionName:            "sub-1",\n    Schema:                      psConsumer,\n    SubscriptionInitialPosition: pulsar.SubscriptionPositionEarliest,\n})\nmsg, err := consumer.Receive(context.Background())\n')))))),(0,t.yg)("h3",{id:"native-avro"},"Native Avro"),(0,t.yg)("p",null,"This example shows how to construct a ",(0,t.yg)("a",{parentName:"p",href:"/docs/4.0.x/schema-understand#struct-schema"},"native Avro schema"),"."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},'org.apache.avro.Schema nativeAvroSchema = \u2026 ;\nProducer<byte[]> producer = pulsarClient.newProducer().topic("ingress").create();\nbyte[] content = \u2026 ;\nproducer.newMessage(Schema.NATIVE_AVRO(nativeAvroSchema)).value(content).send();\n')),(0,t.yg)("h3",{id:"auto_produce"},"AUTO_PRODUCE"),(0,t.yg)("p",null,"Suppose you have a Pulsar topic ",(0,t.yg)("em",{parentName:"p"},"P"),", a producer processing messages from a Kafka topic ",(0,t.yg)("em",{parentName:"p"},"K"),", an application reading the messages from ",(0,t.yg)("em",{parentName:"p"},"K")," and writing the messages to ",(0,t.yg)("em",{parentName:"p"},"P"),"."),(0,t.yg)("p",null,"This example shows how to construct an ",(0,t.yg)("a",{parentName:"p",href:"/docs/4.0.x/schema-understand#auto-schema"},"AUTO_PRODUCE")," schema to verify whether the bytes produced by ",(0,t.yg)("em",{parentName:"p"},"K")," can be sent to ",(0,t.yg)("em",{parentName:"p"},"P"),"."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},"Produce<byte[]> pulsarProducer = client.newProducer(Schema.AUTO_PRODUCE_BYTES())\n    \u2026\n    .create();\nbyte[] kafkaMessageBytes = \u2026 ;\npulsarProducer.produce(kafkaMessageBytes);\n")),(0,t.yg)("h3",{id:"auto_consume"},"AUTO_CONSUME"),(0,t.yg)("p",null,"Suppose you have a Pulsar topic ",(0,t.yg)("em",{parentName:"p"},"P")," and a consumer ",(0,t.yg)("em",{parentName:"p"},"MySQL")," that receives messages from ",(0,t.yg)("em",{parentName:"p"},"P"),", and you want to check if these messages have the information that your application needs to count."),(0,t.yg)("p",null,"This example shows how to construct an ",(0,t.yg)("a",{parentName:"p",href:"/docs/4.0.x/schema-understand#auto-schema"},"AUTO_CONSUME schema")," to verify whether the bytes produced by ",(0,t.yg)("em",{parentName:"p"},"P")," can be sent to ",(0,t.yg)("em",{parentName:"p"},"MySQL"),"."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},'Consumer<GenericRecord> pulsarConsumer = client.newConsumer(Schema.AUTO_CONSUME())\n    \u2026\n    .subscribe();\n\nMessage<GenericRecord> msg = consumer.receive() ;\nGenericRecord record = msg.getValue();\nrecord.getFields().forEach((field -> {\n   if (field.getName().equals("theNeedFieldName")) {\n       Object recordField = record.getField(field);\n       //Do some things\n   }\n}));\n')),(0,t.yg)("h2",{id:"customize-schema-storage"},"Customize schema storage"),(0,t.yg)("p",null,"By default, Pulsar stores various data types of schemas in ",(0,t.yg)("a",{parentName:"p",href:"https://bookkeeper.apache.org"},"Apache BookKeeper")," deployed alongside Pulsar. Alternatively, you can use another storage system if needed."),(0,t.yg)("p",null,"To use a non-default (non-BookKeeper) storage system for Pulsar schemas, you need to implement the following Java interfaces before ",(0,t.yg)("a",{parentName:"p",href:"#deploy-custom-schema-storage"},"deploying custom schema storage"),":"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#implement-schemastorage-interface"},"SchemaStorage interface")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#implement-schemastoragefactory-interface"},"SchemaStorageFactory interface"))),(0,t.yg)("h3",{id:"implement-schemastorage-interface"},"Implement ",(0,t.yg)("inlineCode",{parentName:"h3"},"SchemaStorage")," interface"),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"SchemaStorage")," interface has the following methods:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},"public interface SchemaStorage {\n    // How schemas are updated\n    CompletableFuture<SchemaVersion> put(String key, byte[] value, byte[] hash);\n\n    // How schemas are fetched from storage\n    CompletableFuture<StoredSchema> get(String key, SchemaVersion version);\n\n    // How schemas are deleted\n    CompletableFuture<SchemaVersion> delete(String key);\n\n    // Utility method for converting a schema version byte array to a SchemaVersion object\n    SchemaVersion versionFromBytes(byte[] version);\n\n    // Startup behavior for the schema storage client\n    void start() throws Exception;\n\n    // Shutdown behavior for the schema storage client\n    void close() throws Exception;\n}\n")),(0,t.yg)("admonition",{type:"tip"},(0,t.yg)("p",{parentName:"admonition"},"For a complete example of ",(0,t.yg)("strong",{parentName:"p"},"schema storage")," implementation, see the ",(0,t.yg)("a",{parentName:"p",href:"https://github.com/apache/pulsar/blob/master/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/schema/BookkeeperSchemaStorage.java"},"BookKeeperSchemaStorage")," class.")),(0,t.yg)("h3",{id:"implement-schemastoragefactory-interface"},"Implement ",(0,t.yg)("inlineCode",{parentName:"h3"},"SchemaStorageFactory")," interface"),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"SchemaStorageFactory")," interface has the following method:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},"public interface SchemaStorageFactory {\n    @NotNull\n    SchemaStorage create(PulsarService pulsar) throws Exception;\n}\n")),(0,t.yg)("admonition",{type:"tip"},(0,t.yg)("p",{parentName:"admonition"},"For a complete example of ",(0,t.yg)("strong",{parentName:"p"},"schema storage factory")," implementation, see the ",(0,t.yg)("a",{parentName:"p",href:"https://github.com/apache/pulsar/blob/master/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/schema/BookkeeperSchemaStorageFactory.java"},"BookKeeperSchemaStorageFactory")," class.")),(0,t.yg)("h3",{id:"deploy-custom-schema-storage"},"Deploy custom schema storage"),(0,t.yg)("p",null,"To use your custom schema storage implementation, perform the following steps."),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},"Package the implementation in a ",(0,t.yg)("a",{parentName:"p",href:"https://docs.oracle.com/javase/tutorial/deployment/jar/basicsindex.html"},"JAR")," file.")),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},"Add the JAR file to the ",(0,t.yg)("inlineCode",{parentName:"p"},"lib")," folder in your Pulsar binary or source distribution.")),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},"Change the ",(0,t.yg)("inlineCode",{parentName:"p"},"schemaRegistryStorageClassName")," configuration in the ",(0,t.yg)("inlineCode",{parentName:"p"},"conf/broker.conf")," file to your custom factory class.")),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},"Start Pulsar."))))}d.isMDXComponent=!0}}]);