"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[16380],{15680:(e,t,o)=>{o.d(t,{xA:()=>l,yg:()=>d});var a=o(96540);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,a)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function c(e,t){if(null==e)return{};var o,a,n=function(e,t){if(null==e)return{};var o,a,n={},r=Object.keys(e);for(a=0;a<r.length;a++)o=r[a],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)o=r[a],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var s=a.createContext({}),p=function(e){var t=a.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},l=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var o=e.components,n=e.mdxType,r=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=p(o),g=n,d=m["".concat(s,".").concat(g)]||m[g]||u[g]||r;return o?a.createElement(d,i(i({ref:t},l),{},{components:o})):a.createElement(d,i({ref:t},l))}));function d(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=o.length,i=new Array(r);i[0]=g;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[m]="string"==typeof e?e:n,i[1]=c;for(var p=2;p<r;p++)i[p]=o[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,o)}g.displayName="MDXCreateElement"},5233:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>p});var a=o(58168),n=(o(96540),o(15680));const r={id:"concepts-topic-compaction",title:"Topic Compaction",sidebar_label:"Topic Compaction",descriptions:"Get a comprehensive understanding of concepts, features, and workflow of topic compaction in Apache Pulsar."},i=void 0,c={unversionedId:"concepts-topic-compaction",id:"version-4.0.x/concepts-topic-compaction",title:"Topic Compaction",description:'Pulsar was built with highly scalable persistent storage of message data as a primary objective. Pulsar topics enable you to persistently store as many unacknowledged messages as you need while preserving message ordering. By default, Pulsar stores all unacknowledged/unprocessed messages produced on a topic. Accumulating many unacknowledged messages on a topic is necessary for many Pulsar use cases but it can also be very time intensive for Pulsar consumers to "rewind" through the entire log of messages.',source:"@site/versioned_docs/version-4.0.x/concepts-topic-compaction.md",sourceDirName:".",slug:"/concepts-topic-compaction",permalink:"/docs/4.0.x/concepts-topic-compaction",draft:!1,editUrl:"https://github.com/apache/pulsar-site/edit/main/versioned_docs/version-4.0.x/concepts-topic-compaction.md",tags:[],version:"4.0.x",frontMatter:{id:"concepts-topic-compaction",title:"Topic Compaction",sidebar_label:"Topic Compaction",descriptions:"Get a comprehensive understanding of concepts, features, and workflow of topic compaction in Apache Pulsar."},sidebar:"docsSidebar",previous:{title:"Authentication and Authorization",permalink:"/docs/4.0.x/concepts-authentication"},next:{title:"Message throttling",permalink:"/docs/4.0.x/concepts-throttling"}},s={},p=[{value:"How topic compaction works",id:"how-topic-compaction-works",level:2}],l={toc:p},m="wrapper";function u(e){let{components:t,...o}=e;return(0,n.yg)(m,(0,a.A)({},l,o,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("p",null,"Pulsar was built with highly scalable ",(0,n.yg)("a",{parentName:"p",href:"/docs/4.0.x/concepts-architecture-overview#persistent-storage"},"persistent storage")," of message data as a primary objective. Pulsar topics enable you to persistently store as many unacknowledged messages as you need while preserving message ordering. By default, Pulsar stores ",(0,n.yg)("em",{parentName:"p"},"all"),' unacknowledged/unprocessed messages produced on a topic. Accumulating many unacknowledged messages on a topic is necessary for many Pulsar use cases but it can also be very time intensive for Pulsar consumers to "rewind" through the entire log of messages.'),(0,n.yg)("blockquote",null,(0,n.yg)("p",{parentName:"blockquote"},"For a more practical guide to topic compaction, see the ",(0,n.yg)("a",{parentName:"p",href:"/docs/4.0.x/cookbooks-compaction"},"Topic compaction cookbook"),".")),(0,n.yg)("p",null,'For some use cases, consumers don\'t need a complete "image" of the topic log. They may only need a few values to construct a more "shallow" image of the log, perhaps even just the most recent value. For these kinds of use cases, Pulsar offers ',(0,n.yg)("strong",{parentName:"p"},"topic compaction"),". When you run compaction on a topic, Pulsar goes through a topic's backlog and removes messages that are ",(0,n.yg)("em",{parentName:"p"},"obscured")," by later messages, i.e. topic compaction goes through the topic on a per-key basis and leaves only the most recent message associated with that key."),(0,n.yg)("p",null,"Pulsar's topic compaction feature:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},'Allows for faster "rewind" through topic logs'),(0,n.yg)("li",{parentName:"ul"},"Applies only to ",(0,n.yg)("a",{parentName:"li",href:"/docs/4.0.x/concepts-architecture-overview#persistent-storage"},"persistent topics")),(0,n.yg)("li",{parentName:"ul"},"Triggered automatically when the backlog reaches a certain size or can be triggered manually via the command line. See the ",(0,n.yg)("a",{parentName:"li",href:"/docs/4.0.x/cookbooks-compaction"},"Topic compaction cookbook")),(0,n.yg)("li",{parentName:"ul"},"Is conceptually and operationally distinct from ",(0,n.yg)("a",{parentName:"li",href:"/docs/4.0.x/concepts-messaging#message-retention-and-expiry"},"retention and expiry"),". Topic compaction ",(0,n.yg)("em",{parentName:"li"},"does"),", however, respect retention. If retention has removed a message from the message backlog of a topic, the message will also not be readable from the compacted topic ledger.")),(0,n.yg)("blockquote",null,(0,n.yg)("h4",{parentName:"blockquote",id:"topic-compaction-example-the-stock-ticker"},"Topic compaction example: the stock ticker"),(0,n.yg)("p",{parentName:"blockquote"},"An example use case for a compacted Pulsar topic would be a stock ticker topic. On a stock ticker topic, each message bears a timestamped dollar value for stocks for purchase (with the message key holding the stock symbol, e.g. ",(0,n.yg)("inlineCode",{parentName:"p"},"AAPL")," or ",(0,n.yg)("inlineCode",{parentName:"p"},"GOOG"),"). With a stock ticker you may care only about the most recent value(s) of the stock and have no interest in historical data (i.e. you don't need to construct a complete image of the topic's sequence of messages per key). Compaction would be highly beneficial in this case because it would keep consumers from needing to rewind through obscured messages.")),(0,n.yg)("h2",{id:"how-topic-compaction-works"},"How topic compaction works"),(0,n.yg)("p",null,"When topic compaction is triggered ",(0,n.yg)("a",{parentName:"p",href:"/docs/4.0.x/cookbooks-compaction"},"via the CLI"),", it works in the following steps:"),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},"Pulsar will iterate over the entire topic from beginning to end."),(0,n.yg)("p",{parentName:"li"},"For each key that it encounters the compaction routine will keep a record of the latest occurrence of that key.")),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},"After that, the broker will create a new ",(0,n.yg)("a",{parentName:"p",href:"/docs/4.0.x/concepts-architecture-overview#ledgers"},"BookKeeper ledger")," and make a second iteration through each message on the topic. For each message:"),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"If the key matches the latest occurrence of that key, then the key's data payload, message ID, and metadata will be written to the newly created ledger. ")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"If the key doesn't match the latest then the message will be skipped and left alone. ")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"If any given message has an empty payload, it will be skipped and considered deleted (akin to the concept of ",(0,n.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Tombstone_(data_store)"},"tombstones")," in key-value databases). ")))),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},"At the end of this second iteration through the topic, the newly created BookKeeper ledger is closed and two things are written to the topic's metadata: "),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"The ID of the BookKeeper ledger"),(0,n.yg)("li",{parentName:"ul"},"The message ID of the last compacted message (this is known as the ",(0,n.yg)("strong",{parentName:"li"},"compaction horizon")," of the topic). ")),(0,n.yg)("p",{parentName:"li"},"Once this metadata is written compaction is complete.")),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},"After the initial compaction operation, the Pulsar ",(0,n.yg)("a",{parentName:"p",href:"/docs/4.0.x/concepts-architecture-overview#brokers"},"broker")," that owns the topic is notified whenever any future changes are made to the compaction horizon and compacted backlog. When such changes occur:"),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"Clients (consumers and readers) that have read compacted enabled will attempt to read messages from a topic and either:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"Read from the topic like normal (if the message ID is greater than or equal to the compaction horizon) or"),(0,n.yg)("li",{parentName:"ul"},"Read beginning at the compaction horizon (if the message ID is lower than the compaction horizon)")))))))}u.isMDXComponent=!0}}]);