"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[66028],{15680:(e,t,n)=>{n.d(t,{xA:()=>l,yg:()=>g});var r=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=c(n),d=a,g=p["".concat(u,".").concat(d)]||p[d]||m[d]||o;return n?r.createElement(g,s(s({ref:t},l),{},{components:n})):r.createElement(g,s({ref:t},l))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[p]="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},19365:(e,t,n)=>{n.d(t,{A:()=>s});var r=n(96540),a=n(20053);const o={tabItem:"tabItem_Ymn6"};function s(e){let{children:t,hidden:n,className:s}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.A)(o.tabItem,s),hidden:n},t)}},11470:(e,t,n)=>{n.d(t,{A:()=>N});var r=n(58168),a=n(96540),o=n(20053),s=n(23104),i=n(56347),u=n(57485),c=n(31682),l=n(89466);function p(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function m(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,c.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function d(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const r=(0,i.W6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,u.aZ)(o),(0,a.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(r.location.search);t.set(o,e),r.replace({...r.location,search:t.toString()})}),[o,r])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,o=m(e),[s,i]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:o}))),[u,c]=g({queryString:n,groupId:r}),[p,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,o]=(0,l.Dv)(n);return[r,(0,a.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:r}),y=(()=>{const e=u??p;return d({value:e,tabValues:o})?e:null})();(0,a.useLayoutEffect)((()=>{y&&i(y)}),[y]);return{selectedValue:s,selectValue:(0,a.useCallback)((e=>{if(!d({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),c(e),f(e)}),[c,f,o]),tabValues:o}}var y=n(92303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function h(e){let{className:t,block:n,selectedValue:i,selectValue:u,tabValues:c}=e;const l=[],{blockElementScrollPositionUntilNextRender:p}=(0,s.a_)(),m=e=>{const t=e.currentTarget,n=l.indexOf(t),r=c[n].value;r!==i&&(p(t),u(r))},d=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:s}=e;return a.createElement("li",(0,r.A)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>l.push(e),onKeyDown:d,onClick:m},s,{className:(0,o.A)("tabs__item",b.tabItem,s?.className,{"tabs__item--active":i===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:r}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function T(e){const t=f(e);return a.createElement("div",{className:(0,o.A)("tabs-container",b.tabList)},a.createElement(h,(0,r.A)({},e,t)),a.createElement(v,(0,r.A)({},e,t)))}function N(e){const t=(0,y.A)();return a.createElement(T,(0,r.A)({key:String(t)},e))}},8818:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>u,default:()=>g,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var r=n(58168),a=(n(96540),n(15680)),o=n(11470),s=n(19365);const i={id:"txn-use",title:"Get started",sidebar_label:"Get started",description:"Get started to use Pulsar transaction API."},u=void 0,c={unversionedId:"txn-use",id:"txn-use",title:"Get started",description:"Get started to use Pulsar transaction API.",source:"@site/docs/txn-use.md",sourceDirName:".",slug:"/txn-use",permalink:"/docs/next/txn-use",draft:!1,editUrl:"https://github.com/apache/pulsar-site/edit/main/docs/txn-use.md",tags:[],version:"current",frontMatter:{id:"txn-use",title:"Get started",sidebar_label:"Get started",description:"Get started to use Pulsar transaction API."},sidebar:"docsSidebar",previous:{title:"Concept",permalink:"/docs/next/txn-what"},next:{title:"Advanced features",permalink:"/docs/next/txn-advanced-features"}},l={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Steps",id:"steps",level:2},{value:"Related topics",id:"related-topics",level:2}],m={toc:p},d="wrapper";function g(e){let{components:t,...n}=e;return(0,a.yg)(d,(0,r.A)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"Pulsar transaction is primarily a server-side and protocol-level feature. This tutorial guides you through every step of how to use the ",(0,a.yg)("a",{parentName:"p",href:"https://pulsar.apache.org/api/admin/4.0.x/"},"Pulsar transaction API")," to send and receive messages in a Java client."),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("p",{parentName:"admonition"},"Currently, ",(0,a.yg)("a",{parentName:"p",href:"https://pulsar.apache.org/api/admin/4.0.x/"},"Pulsar transaction API")," is available in ",(0,a.yg)("strong",{parentName:"p"},"Pulsar 2.8.0 or later")," versions. It is only available for ",(0,a.yg)("strong",{parentName:"p"},"Java"),", ",(0,a.yg)("strong",{parentName:"p"},"Go")," and ",(0,a.yg)("strong",{parentName:"p"},".NET")," clients.")),(0,a.yg)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"/docs/next/getting-started-standalone"},"Start Pulsar 2.8.0 or later versions"))),(0,a.yg)("h2",{id:"steps"},"Steps"),(0,a.yg)("p",null,"To use Pulsar transaction API, complete the following steps."),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Enable transactions."),(0,a.yg)("p",{parentName:"li"},"You can set the following configurations in the ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/apache/pulsar/blob/master/conf/broker.conf"},(0,a.yg)("inlineCode",{parentName:"a"},"broker.conf"))," or ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/apache/pulsar/blob/master/conf/standalone.conf"},(0,a.yg)("inlineCode",{parentName:"a"},"standalone.conf"))," file."),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-conf"},"//mandatory configuration, used to enable transaction coordinator\ntransactionCoordinatorEnabled=true\n\n//mandatory configuration, used to create systemTopic used for transaction buffer snapshot\nsystemTopicEnabled=true\n")),(0,a.yg)("admonition",{parentName:"li",type:"note"},(0,a.yg)("p",{parentName:"admonition"},(0,a.yg)("strong",{parentName:"p"},"By default"),", Pulsar transactions are ",(0,a.yg)("strong",{parentName:"p"},"disabled"),"."))),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Initialize transaction coordinator metadata."),(0,a.yg)("p",{parentName:"li"},"The transaction coordinator can leverage the advantages of partitioned topics (such as load balance)."),(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Input")),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"bin/pulsar initialize-transaction-coordinator-metadata -cs 127.0.0.1:2181 -c standalone\n")),(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Output")),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"Transaction coordinator metadata setup success\n"))),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Create a Pulsar client and enable transactions. Since client need to know transaction coordinator from system topic, please make sure your client role has system namespace ",(0,a.yg)("inlineCode",{parentName:"p"},"pulsar/system")," produce/consume permissions.")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Create producers and consumers.")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Produce and receive messages.")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Create transactions.")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Produce and ack messages with transactions."),(0,a.yg)("admonition",{parentName:"li",type:"note"},(0,a.yg)("p",{parentName:"admonition"},"Currently, messages can be acked individually rather than cumulatively."))),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"End transactions."),(0,a.yg)("admonition",{parentName:"li",type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"The code snippet below is the example for step 3 - step 8.")))),(0,a.yg)(o.A,{groupId:"api-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"Go",value:"Go"}],mdxType:"Tabs"},(0,a.yg)(s.A,{value:"Java",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-java"},'PulsarClient client = PulsarClient.builder()\n                // Step 3: create a Pulsar client and enable transactions.\n                .enableTransaction(true)\n                .serviceUrl(jct.serviceUrl)\n                .build();\n\n// Step 4: create three producers to produce messages to input and output topics.\nProducerBuilder<String> producerBuilder = client.newProducer(Schema.STRING);\nProducer<String> inputProducer = producerBuilder.topic(inputTopic)\n        .sendTimeout(0, TimeUnit.SECONDS).create();\nProducer<String> outputProducerOne = producerBuilder.topic(outputTopicOne)\n        .sendTimeout(0, TimeUnit.SECONDS).create();\nProducer<String> outputProducerTwo = producerBuilder.topic(outputTopicTwo)\n        .sendTimeout(0, TimeUnit.SECONDS).create();\n// Step 4: create three consumers to consume messages from input and output topics.\nConsumer<String> inputConsumer = client.newConsumer(Schema.STRING)\n        .subscriptionName("your-subscription-name").topic(inputTopic).subscribe();\nConsumer<String> outputConsumerOne = client.newConsumer(Schema.STRING)\n        .subscriptionName("your-subscription-name").topic(outputTopicOne).subscribe();\nConsumer<String> outputConsumerTwo = client.newConsumer(Schema.STRING)\n        .subscriptionName("your-subscription-name").topic(outputTopicTwo).subscribe();\n\nint count = 2;\n// Step 5: produce messages to input topics.\nfor (int i = 0; i < count; i++) {\n    inputProducer.send("Hello Pulsar! count : " + i);\n}\n\n// Step 5: consume messages and produce them to output topics with transactions.\nfor (int i = 0; i < count; i++) {\n\n    // Step 5: the consumer successfully receives messages.\n    Message<String> message = inputConsumer.receive();\n\n    // Step 6: create transactions.\n    // The transaction timeout is specified as 10 seconds.\n    // If the transaction is not committed within 10 seconds, the transaction is automatically aborted.\n    Transaction txn = null;\n    try {\n        txn = client.newTransaction()\n                .withTransactionTimeout(10, TimeUnit.SECONDS).build().get();\n        // Step 6: you can process the received message with your use case and business logic.\n\n        // Step 7: the producers produce messages to output topics with transactions\n        outputProducerOne.newMessage(txn).value("Hello Pulsar! outputTopicOne count : " + i).send();\n        outputProducerTwo.newMessage(txn).value("Hello Pulsar! outputTopicTwo count : " + i).send();\n\n        // Step 7: the consumers acknowledge the input message with the transactions *individually*.\n        inputConsumer.acknowledgeAsync(message.getMessageId(), txn).get();\n        // Step 8: commit transactions.\n        txn.commit().get();\n    } catch (ExecutionException e) {\n        if (!(e.getCause() instanceof PulsarClientException.TransactionConflictException)) {\n            // If TransactionConflictException is not thrown,\n            // you need to redeliver or negativeAcknowledge this message,\n            // or else this message will not be received again.\n            inputConsumer.negativeAcknowledge(message);\n        }\n\n        // If a new transaction is created,\n        // then the old transaction should be aborted.\n        if (txn != null) {\n            txn.abort();\n        }\n    }\n}\n\n// Final result: consume messages from output topics and print them.\nfor (int i = 0; i < count; i++) {\n    Message<String> message =  outputConsumerOne.receive();\n    System.out.println("Receive transaction message: " + message.getValue());\n}\n\nfor (int i = 0; i < count; i++) {\n    Message<String> message =  outputConsumerTwo.receive();\n    System.out.println("Receive transaction message: " + message.getValue());\n}\n'))),(0,a.yg)(s.A,{value:"Go",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-go"},'// Step 3: create a Pulsar client and enable transactions.\nclient, err := pulsar.NewClient(pulsar.ClientOptions{\n  URL:               "<serviceUrl>",\n  EnableTransaction: true,\n})\nif err != nil {\n  log.Fatalf("create client fail, err = %v", err)\n}\ndefer client.Close()\n// Step 4: create three producers to produce messages to input and output topics.\ninputTopic := "inputTopic"\noutputTopicOne := "outputTopicOne"\noutputTopicTwo := "outputTopicTwo"\nsubscriptionName := "your-subscription-name"\ninputProducer, _ := client.CreateProducer(pulsar.ProducerOptions{\n  Topic:       inputTopic,\n  SendTimeout: 0,\n})\ndefer inputProducer.Close()\noutputProducerOne, _ := client.CreateProducer(pulsar.ProducerOptions{\n  Topic:       outputTopicOne,\n  SendTimeout: 0,\n})\ndefer outputProducerOne.Close()\noutputProducerTwo, _ := client.CreateProducer(pulsar.ProducerOptions{\n  Topic:       outputTopicTwo,\n  SendTimeout: 0,\n})\ndefer outputProducerTwo.Close()\n\n// Step 4: create three consumers to consume messages from input and output topics.\ninputConsumer, _ := client.Subscribe(pulsar.ConsumerOptions{\n  Topic:            inputTopic,\n  SubscriptionName: subscriptionName,\n})\ndefer inputConsumer.Close()\noutputConsumerOne, _ := client.Subscribe(pulsar.ConsumerOptions{\n  Topic:            outputTopicOne,\n  SubscriptionName: subscriptionName,\n})\ndefer outputConsumerOne.Close()\noutputConsumerTwo, _ := client.Subscribe(pulsar.ConsumerOptions{\n  Topic:            outputTopicTwo,\n  SubscriptionName: subscriptionName,\n})\ndefer outputConsumerTwo.Close()\n\n// Step 5: produce messages to input topics.\nctx := context.Background()\ncount := 2\nfor i := 0; i < count; i++ {\n  inputProducer.Send(ctx, &pulsar.ProducerMessage{\n    Payload: []byte(fmt.Sprintf("Hello Pulsar! count : %d", i)),\n  })\n}\n// Step 5: consume messages and produce them to output topics with transactions.\nfor i := 0; i < count; i++ {\n  // Step 5: the consumer successfully receives messages.\n  message, err := inputConsumer.Receive(ctx)\n  if err != nil {\n    log.Printf("receive message from %s fail, err = %v", inputTopic, err)\n    continue\n  }\n  // Step 6: create transactions.\n  // The transaction timeout is specified as 10 seconds.\n  // If the transaction is not committed within 10 seconds, the transaction is automatically aborted.\n  txn, err := client.NewTransaction(10 * time.Second)\n  if err != nil {\n    log.Printf("create txn fail, err = %v", err)\n    continue\n  }\n  // Step 6: you can process the received message with your use case and business logic.\n  // processMessage(message)\n  // Step 7: the producers produce messages to output topics with transactions\n  _, err = outputProducerOne.Send(context.Background(), &pulsar.ProducerMessage{\n    Transaction: txn,\n    Payload:     []byte(fmt.Sprintf("Hello Pulsar! outputTopicOne count : %d", i)),\n  })\n  if err != nil {\n    log.Printf("send to producerOne fail %v", err)\n    txn.Abort(ctx)\n  }\n  _, err = outputProducerTwo.Send(context.Background(), &pulsar.ProducerMessage{\n    Transaction: txn,\n    Payload:     []byte(fmt.Sprintf("Hello Pulsar! outputTopicTwo count : %d", i)),\n  })\n  if err != nil {\n    log.Printf("send to producerTwo fail %v", err)\n    txn.Abort(ctx)\n  }\n  // Step 7: the consumers acknowledge the input message with the transactions *individually*.\n  err = inputConsumer.AckWithTxn(message, txn)\n  if err != nil {\n    log.Printf("ack message fail %v", err)\n    txn.Abort(ctx)\n  }\n  // Step 8: commit transactions.\n  err = txn.Commit(ctx)\n  if err != nil {\n    log.Printf("commit txn fail %v", err)\n  }\n}\n\n// Final result: consume messages from output topics and print them.\nfor i := 0; i < count; i++ {\n  message, _ := outputConsumerOne.Receive(ctx)\n  log.Printf("Receive transaction message: %s", string(message.Payload()))\n}\nfor i := 0; i < count; i++ {\n  message, _ := outputConsumerTwo.Receive(ctx)\n  log.Printf("Receive transaction message: %s", string(message.Payload()))\n}\n')))),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"**Output**\n\n```java\nReceive transaction message: Hello Pulsar! count : 1\nReceive transaction message: Hello Pulsar! count : 2\nReceive transaction message: Hello Pulsar! count : 1\nReceive transaction message: Hello Pulsar! count : 2\n```\n")),(0,a.yg)("h2",{id:"related-topics"},"Related topics"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"To learn more features that can be used with transactions, see ",(0,a.yg)("a",{parentName:"li",href:"/docs/next/txn-advanced-features"},"Pulsar transactions - Advanced features"),".")))}g.isMDXComponent=!0}}]);