"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[55077],{15680:(e,a,n)=>{n.d(a,{xA:()=>p,yg:()=>d});var t=n(96540);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function s(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?s(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},s=Object.keys(e);for(t=0;t<s.length;t++)n=s[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)n=s[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=t.createContext({}),l=function(e){var a=t.useContext(c),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},p=function(e){var a=l(e.components);return t.createElement(c.Provider,{value:a},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(n),m=r,d=u["".concat(c,".").concat(m)]||u[m]||g[m]||s;return n?t.createElement(d,o(o({ref:a},p),{},{components:n})):t.createElement(d,o({ref:a},p))}));function d(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=m;var i={};for(var c in a)hasOwnProperty.call(a,c)&&(i[c]=a[c]);i.originalType=e,i[u]="string"==typeof e?e:r,o[1]=i;for(var l=2;l<s;l++)o[l]=n[l];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},62396:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>o,default:()=>g,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var t=n(58168),r=(n(96540),n(15680));const s={id:"client-libraries-java-use",title:"Use a Java client",sidebar_label:"Use",description:"Learn how to use Java client in Pulsar."},o=void 0,i={unversionedId:"client-libraries-java-use",id:"version-4.0.x/client-libraries-java-use",title:"Use a Java client",description:"Learn how to use Java client in Pulsar.",source:"@site/versioned_docs/version-4.0.x/client-libraries-java-use.md",sourceDirName:".",slug:"/client-libraries-java-use",permalink:"/docs/4.0.x/client-libraries-java-use",draft:!1,editUrl:"https://github.com/apache/pulsar-site/edit/main/versioned_docs/version-4.0.x/client-libraries-java-use.md",tags:[],version:"4.0.x",frontMatter:{id:"client-libraries-java-use",title:"Use a Java client",sidebar_label:"Use",description:"Learn how to use Java client in Pulsar."},sidebar:"docsSidebar",previous:{title:"Initialize",permalink:"/docs/4.0.x/client-libraries-java-initialize"},next:{title:"C++ client",permalink:"/docs/4.0.x/client-libraries-cpp"}},c={},l=[{value:"Create a producer",id:"create-a-producer",level:2},{value:"Create a consumer",id:"create-a-consumer",level:2},{value:"Create a reader",id:"create-a-reader",level:2}],p={toc:l},u="wrapper";function g(e){let{components:a,...n}=e;return(0,r.yg)(u,(0,t.A)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,r.yg)("h2",{id:"create-a-producer"},"Create a producer"),(0,r.yg)("p",null,"Once you've instantiated a ",(0,r.yg)("a",{parentName:"p",href:"https://pulsar.apache.org/api/client/4.0.x/org/apache/pulsar/client/api/PulsarClient"},"PulsarClient")," object, you can create a ",(0,r.yg)("a",{parentName:"p",href:"https://pulsar.apache.org/api/client/4.0.x/org/apache/pulsar/client/api/Producer"},"Producer")," for a specific Pulsar ",(0,r.yg)("a",{parentName:"p",href:"/docs/4.0.x/reference-terminology#topic"},"topic"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},'Producer<byte[]> producer = client.newProducer()\n        .topic("my-topic")\n        .create();\n\n// You can then send messages to the broker and topic you specified:\nproducer.send("My message".getBytes());\n')),(0,r.yg)("p",null,"By default, producers produce messages that consist of byte arrays. You can produce different types by specifying a message ",(0,r.yg)("a",{parentName:"p",href:"#schema"},"schema"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},'Producer<String> stringProducer = client.newProducer(Schema.STRING)\n        .topic("my-topic")\n        .create();\nstringProducer.send("My message");\n')),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Make sure that you close your producers, consumers, and clients when you do not need them.")),(0,r.yg)("blockquote",null,(0,r.yg)("pre",{parentName:"blockquote"},(0,r.yg)("code",{parentName:"pre",className:"language-java"},"producer.close();\nconsumer.close();\nclient.close();\n"))),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Close operations can also be asynchronous:")),(0,r.yg)("blockquote",null,(0,r.yg)("pre",{parentName:"blockquote"},(0,r.yg)("code",{parentName:"pre",className:"language-java"},'producer.closeAsync()\n   .thenRun(() -> System.out.println("Producer closed"))\n   .exceptionally((ex) -> {\n       System.err.println("Failed to close producer: " + ex);\n       return null;\n   });\n'))),(0,r.yg)("h2",{id:"create-a-consumer"},"Create a consumer"),(0,r.yg)("p",null,"In Pulsar, consumers subscribe to topics and handle messages that producers publish to those topics. You can instantiate a new ",(0,r.yg)("a",{parentName:"p",href:"/docs/4.0.x/reference-terminology#consumer"},"consumer")," by first instantiating a ",(0,r.yg)("a",{parentName:"p",href:"https://pulsar.apache.org/api/client/4.0.x/org/apache/pulsar/client/api/PulsarClient"},"PulsarClient")," object and passing it a URL for a Pulsar broker (as ",(0,r.yg)("a",{parentName:"p",href:"#client-configuration"},"above"),")."),(0,r.yg)("p",null,"Once you've instantiated a ",(0,r.yg)("a",{parentName:"p",href:"https://pulsar.apache.org/api/client/4.0.x/org/apache/pulsar/client/api/PulsarClient"},"PulsarClient")," object, you can create a ",(0,r.yg)("a",{parentName:"p",href:"https://pulsar.apache.org/api/client/4.0.x/org/apache/pulsar/client/api/Consumer"},"Consumer")," by specifying a ",(0,r.yg)("a",{parentName:"p",href:"/docs/4.0.x/reference-terminology#topic"},"topic")," and a ",(0,r.yg)("a",{parentName:"p",href:"/docs/4.0.x/concepts-messaging#subscription-types"},"subscription"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},'Consumer consumer = client.newConsumer()\n        .topic("my-topic")\n        .subscriptionName("my-subscription")\n        .subscribe();\n')),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"subscribe")," method will auto-subscribe the consumer to the specified topic and subscription. One way to make the consumer listen to the topic is to set up a ",(0,r.yg)("inlineCode",{parentName:"p"},"while")," loop. In this example loop, the consumer listens for messages, prints the contents of any received message, and then ",(0,r.yg)("a",{parentName:"p",href:"/docs/4.0.x/reference-terminology#acknowledgment-ack"},"acknowledges")," that the message has been processed. If the processing logic fails, you can use ",(0,r.yg)("a",{parentName:"p",href:"/docs/4.0.x/reference-terminology#acknowledgment-ack"},"negative acknowledgment")," to redeliver the message later."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},'while (true) {\n  // Wait for a message\n  Message msg = consumer.receive();\n\n  try {\n      // Do something with the message\n      System.out.println("Message received: " + new String(msg.getData()));\n\n      // Acknowledge the message\n      consumer.acknowledge(msg);\n  } catch (Exception e) {\n      // Message failed to process, redeliver later\n      consumer.negativeAcknowledge(msg);\n  }\n}\n')),(0,r.yg)("p",null,"If you don't want to block your main thread but constantly listen for new messages, consider using a ",(0,r.yg)("inlineCode",{parentName:"p"},"MessageListener"),". The ",(0,r.yg)("inlineCode",{parentName:"p"},"MessageListener")," uses a thread pool inside the client. You can set the number of threads for message listeners in the ClientBuilder. The ",(0,r.yg)("inlineCode",{parentName:"p"},"MessageListener")," will use a thread pool inside the PulsarClient. You can set the number of threads to use for message listeners in the ClientBuilder."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},'MessageListener myMessageListener = (consumer, msg) -> {\n  try {\n      System.out.println("Message received: " + new String(msg.getData()));\n      consumer.acknowledge(msg);\n  } catch (Exception e) {\n      consumer.negativeAcknowledge(msg);\n  }\n}\n\nConsumer consumer = client.newConsumer()\n     .topic("my-topic")\n     .subscriptionName("my-subscription")\n     .messageListener(myMessageListener)\n     .subscribe();\n')),(0,r.yg)("h2",{id:"create-a-reader"},"Create a reader"),(0,r.yg)("p",null,"With the ",(0,r.yg)("a",{parentName:"p",href:"/docs/4.0.x/concepts-clients#reader-interface"},"reader interface"),', Pulsar clients can "manually position" themselves within a topic and read all messages from a specified message onward. The Pulsar API for Java enables you to create ',(0,r.yg)("a",{parentName:"p",href:"https://pulsar.apache.org/api/client/4.0.x/org/apache/pulsar/client/api/Reader"},"Reader")," objects by specifying a topic and a ",(0,r.yg)("a",{parentName:"p",href:"https://pulsar.apache.org/api/client/4.0.x/org/apache/pulsar/client/api/MessageId"},"MessageId"),"."),(0,r.yg)("p",null,"The following is an example."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"byte[] msgIdBytes = // Some message ID byte array\nMessageId id = MessageId.fromByteArray(msgIdBytes);\nReader reader = pulsarClient.newReader()\n        .topic(topic)\n        .startMessageId(id)\n        .create();\n\nwhile (true) {\n    Message message = reader.readNext();\n    // Process message\n}\n")),(0,r.yg)("p",null,"In the example above, a ",(0,r.yg)("inlineCode",{parentName:"p"},"Reader")," object is instantiated for a specific topic and message (by ID); the reader iterates over each message in the topic after the message is identified by ",(0,r.yg)("inlineCode",{parentName:"p"},"msgIdBytes")," (how that value is obtained depends on the application)."),(0,r.yg)("p",null,"The code sample above shows pointing the ",(0,r.yg)("inlineCode",{parentName:"p"},"Reader")," object to a specific message (by ID), but you can also use ",(0,r.yg)("inlineCode",{parentName:"p"},"MessageId.earliest")," to point to the earliest available message on the topic of ",(0,r.yg)("inlineCode",{parentName:"p"},"MessageId.latest")," to point to the most recent available message."))}g.isMDXComponent=!0}}]);